{"version":3,"sources":["pages/Auth.js","components/AppBar.js","components/listItems.js","components/Drawer.js","components/styles.js","functions/schemaFactory.js","functions/firebase.js","functions/objectStringSchema.js","functions/deleteData.js","components/Card.js","pages/Categories.js","pages/Stores.js","pages/ViewStoreDetails.js","functions/general.js","components/ImageUpload.js","Placeholder.jpg","components/Form.js","pages/AdBanner.js","components/formWrap.js","components/AntImageUpload.js","components/StoreAdd.js","components/StoreEdit.js","components/CatImage.js","components/EditCategory.js","pages/Dashboard.js","pages/Login.js","App.js","index.js"],"names":["makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","AppBarComponent","classes","drawer","open","useHistory","AppBar","position","className","clsx","appBar","appBarShift","Toolbar","toolbar","IconButton","edge","color","onClick","menuButton","menuButtonHidden","Typography","component","variant","noWrap","title","localStorage","clear","window","location","reload","_style","textDecoration","MainListItems","to","style","ListItem","button","ListItemIcon","ListItemText","primary","DrawerComponent","Drawer","drawerPaper","drawerPaperClose","toolbarIcon","Divider","List","useStyles","root","paddingRight","justifyContent","padding","mixins","zIndex","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","enteringScreen","marginRight","flexGrow","whiteSpace","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","fixedHeight","schema","loc","imgLocation","data","key","type","displayName","validation","Yup","required","values","notSub","deleteFile","url","a","getElementsOfType","s","level","ret","Array","isArray","console","log","map","e","getObjectValueUsingString","obj","str","formattedKeyArray","replaceAll","split","acc","current","undefined","collectionToJsonSchema","c","keys","length","forEach","push","parent","schemaToStringKeys","i","deleteFromDb","path","maxWidth","CardComponent","React","useState","render","useLocation","useEffect","Card","CardActionArea","CardMedia","alt","value","label","name","image","process","filename","CardContent","gutterBottom","CardActions","pathname","state","heading","action","Button","size","confirmAlert","message","buttons","deleteData","createBrowserHistory","fab","top","right","bottom","left","Categories","update","init","axios","method","then","response","status","catch","error","Container","Grid","Object","element","item","xs","sm","id","post","toast","success","Fab","pagination","paginationFactory","page","sizePerPage","Stores","SearchBar","Search","get","hanldeDelete","columns","dataField","text","isDummyField","formatter","cell","row","rowIndex","searchable","csvExport","keyField","search","props","searchProps","baseProps","wrapperClasses","Promise","resolve","reject","db","firebase","database","ref","once","storeSnapshot","storeDetailsSnapshot","val","ViewStoreDetails","setData","getData","result","Paper","desciption","category","services","arrayDifference","x","y","filter","some","k","ImageUpload","forwardRef","defaultImage","src","inputRef","useRef","useImperativeHandle","clearInputs","clearImages","setImgState","currentFile","previewImage","loading","imgState","clickInput","click","hidden","accept","onChange","event","img","target","files","startsWith","URL","createObjectURL","multiple","Skeleton","animation","mapData","onError","shape","backdrop","card","marginBottom","boxShadow","submitArea","removeFromSchema","objString","formattedKey","splice","slice","join","addToSchema","deleteImages","images","res","rej","deleted","failed","jsonToFormMap","json","formMap","entries","p","assign","getFiles","formObject","File","resolveEmptyFiles","f","submitData","formData","toastId","v","replace","pushData","FormData","append","headers","dismiss","Key","getItem","postData","getStringKeysFromSchema","currentSchema","Form","history","sameKey","resolvedSchema","submitting","updateSubmitting","nodeData","categoryData","setCategoryData","fromEntries","createSchemaCollection","updateCurrentSchema","validationSchema","inputsRef","forms","formik","useFormik","initialValues","enableReinitialize","removeFormFiles","removeImages","submitMultiple","schemaStringKeys","setFieldTouched","validateForm","errors","notif","fail","goBack","setValues","nodeDataStr","formdata","imgRegexp","oldImgs","pattern","RegExp","match","toDelete","generateFeilds","sch","updateSchema","fieldElements","levelInt","keyProp","inputId","TextField","InputLabelProps","shrink","fullWidth","handleChange","touched","helperText","onBlur","multiline","rows","rowsMax","InputLabel","NativeSelect","setFieldValue","m","FormHelperText","copy","formSubHeading","Fragment","Backdrop","preventDefault","CircularProgress","encType","prev","direction","disabled","Ad","schemaFactory","FormWrap","schemaName","getBase64","callback","reader","FileReader","addEventListener","readAsDataURL","beforeUpload","file","isJpgOrPng","isLt2M","AntImageUpload","delete","handleDelete","store_id","storeid","alert","info","imageId","originFileObj","imageUrl","setState","fetchEvent","filteredUsers","banners","user","includes","list","charAt","this","uploadButton","LoadingOutlined","PlusOutlined","listType","showUploadList","single","product","Component","StoreAdd","useForm","handleSubmit","register","control","watch","formState","useFieldArray","fields","remove","onSubmit","defaultValue","field","charge","mode","placeholder","StoreEdit","setBanners","setImage","setService","destination","setUpdateService","setValue","params","useParams","phone","stars","latitude","longitude","instagram","dribbble","offer","bannerimg","bannerImages","JSON","stringify","keywords","newid","CatImage","EditCategory","image_id","responseImg","Dashboard","setOpen","CssBaseline","Login","username","setUsername","password","setPassword","md","icon","cilUser","autoComplete","cilLockLocked","body","setItem","full_name","token","user_id","authContext","createContext","App","userdata","updateUser","Provider","PrivateRoute","children","rest","auth","useContext","from","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2c874e8.chunk.js","sourcesContent":["import React from 'react'\nimport firebase from \"firebase/app\";\nimport 'firebase/auth';\nimport { useHistory } from \"react-router-dom\";\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport toast, { Toaster } from 'react-hot-toast';\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\n\n\n\nexport const signout = (setter) => firebase.app().auth().signOut();\n\nconst googleAuth = async (history) => {\n    return new Promise(async (resolve, reject) => {\n        const auth = firebase.auth();\n        const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n        try {\n            let res = await auth.signInWithPopup(googleAuthProvider);\n            console.log(res)\n            resolve(res)\n        }\n        catch (e) {\n            console.log(e)\n            reject(e)\n\n        }\n    })\n\n};\n\nexport default function AuthPage(props) {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">Sign in</Typography>\n                <form className={classes.form} noValidate>\n                    <Button\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                        onClick={() =>\n                            googleAuth(\n                                history\n                            ).then(()=>{\n                                toast.success(\"Login success\")\n                            }).catch(e => toast.error(e))\n                        }\n                    >Continue with Google</Button>\n\n                </form>\n            </div>\n            <Toaster />\n        </Container>\n\n    );\n\n}","import React from 'react';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n//import firebase from \"firebase/app\";\nimport { useHistory } from \"react-router-dom\";\nimport { Redirect } from 'react-router-dom';\n\nexport default function AppBarComponent({ classes, drawer, open }) {\n\n\n    const history = useHistory();\n    function logout(){\n        // console.log('--------logout-----pressed----');\n        // //firebase.auth().signOut();\n        // localStorage.setItem('is_login', false);\n        // localStorage.setItem('full_name', null);\n        // localStorage.setItem('token', null);\n        // localStorage.setItem('user_id', null);\n        // window.location.reload(false);\n        \n        localStorage.clear()\n        window.location.reload(false);\n    }\n    return (\n        <AppBar position=\"absolute\"\n            className={clsx(classes.appBar, open && classes.appBarShift)}\n        >\n            <Toolbar className={classes.toolbar}>\n                <IconButton\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"open drawer\"\n                    onClick={drawer}\n                    className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n                >\n                    <MenuIcon />\n                </IconButton>\n                <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                    Dashboard\n          </Typography>\n                <IconButton color=\"inherit\" >\n                <ExitToAppIcon onClick={() => logout()} />\n\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    )\n}","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PeopleIcon from '@material-ui/icons/People';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst _style = { textDecoration: 'none' ,color: '#000000' };\n\n\nexport const MainListItems = () => {\n  return (\n    <div>\n      <Link to=\"/ads\" style={_style}>\n        <ListItem button>\n          <ListItemIcon>\n            <ShoppingCartIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Advertisement\" />\n        </ListItem>\n      </Link>\n\n\n\n      <Link to=\"/categories\" style={_style}>\n        <ListItem button>\n          <ListItemIcon>\n            <DashboardIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Categories\" />\n        </ListItem>\n      </Link>\n\n      {/* defaults to store */}\n      <Link to=\"/\" style={_style}>\n        <ListItem button>\n          <ListItemIcon>\n            <ShoppingCartIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Stores\" />\n        </ListItem>\n      </Link>\n\n    </div >\n  );\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport {\n    MainListItems,\n    // secondaryListItems \n} from './listItems';\n\nexport default function DrawerComponent({ classes, drawer, open }) {\n    return (\n        <Drawer\n            variant=\"permanent\"\n            classes={{\n                paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n            }}\n            open={open}\n        >\n            <div className={classes.toolbarIcon}>\n                <IconButton onClick={drawer}>\n                    <ChevronLeftIcon />\n                </IconButton>\n            </div>\n            <Divider />\n            <List>\n                <MainListItems />\n            </List>\n        </Drawer>\n    )\n}\n","import { makeStyles } from '@material-ui/core/styles';\nconst drawerWidth = 240;\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));","import * as Yup from 'yup';\nexport default (schema, loc = '') => {\n    switch (schema) {\n        case 'category':\n            return (\n                {\n\n                    to: '/categories/' + loc,\n                    imgLocation: 'category/',\n                    data: [\n                        { key: 'name', type: 'text', displayName: 'Name' },\n                        { key: 'label', type: 'text', displayName: 'Label' },\n                        { key: 'img', type: 'image', displayName: 'Image' },\n                    ]\n\n                }\n            )\n        case 'stores_full':\n            return (\n                [\n                    {\n                        to: '/stores/' + loc,\n                        imgLocation: 'stores/',\n                        data: [\n                            { key: 'name', type: 'text', displayName: 'name', validation: Yup.string().required('Required') },\n                            { key: 'location', type: 'text', displayName: 'Location', validation: Yup.string().required('Required') },\n                            { key: 'category', type: 'select', displayName: 'category', values: '/categories/$1/name', validation: Yup.string().required('Required') },\n                            { key: 'desciption', type: 'textarea', displayName: 'discription' },\n                            { key: 'phone', type: 'text', displayName: 'phone' },\n                            { key: 'stars', type: 'text', displayName: 'stars' },\n                            {\n                                key: 'coords', type: 'json', displayName: 'coordinates', notSub: true, data: [\n                                    { key: 'latitude', type: 'text', displayName: 'latitude' },\n                                    { key: 'longitude', type: 'text', displayName: 'longitude' },\n                                ]\n                            },\n                            {\n                                key: 'urls', type: 'json', displayName: 'Links', notSub: true, data: [\n                                    { key: 'instagram', type: 'text', displayName: 'Instagram' },\n                                    { key: 'dribbble', type: 'text', displayName: 'Website' },\n                                ]\n                            },\n                            { key: 'img', type: 'image', displayName: 'Image' },\n                            { key: 'bannerImg', type: 'image', displayName: 'Banner image' },\n\n                        ]\n                    },\n                    {\n                        to: '/store_details/' + loc,\n                        imgLocation: 'stores/',\n                        data: [\n                            {\n                                key: 'services', type: 'collection', displayName: 'Services', notSub: true, schema: [\n                                    { key: 'name', type: 'text', displayName: 'Name' },\n                                    { key: 'charge', type: 'text', displayName: 'Charge' },\n                                    { key: 'image', type: 'image', displayName: 'Image' },\n\n                                ]\n                            },\n                        ]\n\n                    }\n\n                ]\n            )\n        case 'stores':\n            return (\n                {\n                    to: '/stores/' + loc,\n                    imgLocation: 'stores/',\n                    data: [\n                        { key: 'name', type: 'text', displayName: 'name' },\n                        { key: 'location', type: 'text', displayName: 'Location' },\n                        { key: 'category', type: 'select', displayName: 'category', values: '/categories/$1/name' },\n                        { key: 'desciption', type: 'textarea', displayName: 'discription' },\n                        { key: 'img', type: 'image', displayName: 'Image' },\n                        { key: 'phone', type: 'text', displayName: 'phone' },\n                        { key: 'stars', type: 'text', displayName: 'stars' },\n                        {\n                            key: 'coords', type: 'json', displayName: 'coordinates', notSub: true, data: [\n                                { key: 'latitude', type: 'text', displayName: 'latitude' },\n                                { key: 'longitude', type: 'text', displayName: 'longitude' },\n                            ]\n                        },\n                        {\n                            key: 'urls', type: 'json', displayName: 'Links', notSub: true, data: [\n                                { key: 'instagram', type: 'text', displayName: 'Instagram' },\n                                { key: 'dribbble', type: 'text', displayName: 'Website' },\n                            ]\n                        }\n\n                    ]\n                }\n            )\n        case 'store_details':\n            return (\n                {\n                    to: '/store_details/' + loc,\n                    imgLocation: 'stores/',\n                    data: [\n                        { key: 'bannerImg', type: 'image', displayName: 'Banner image' },\n                        {\n                            key: 'services', type: 'collection', displayName: 'Services', notSub: true, schema: [\n                                { key: 'name', type: 'text', displayName: 'Name' },\n                                { key: 'charge', type: 'text', displayName: 'Charge' },\n                                { key: 'img', type: 'image', displayName: 'Image' },\n\n                            ]\n                        },\n                    ]\n\n                }\n            )\n        case 'ads':\n            return (\n                {\n                    to: '/ads/frontPage/RQJCOSIF4JF',\n                    imgLocation: 'ads/frontPage/',\n                    data: [\n                        { key: 'img', type: 'image', displayName: '' },\n                    ]\n                }\n            )\n    }\n}","//import firebase from \"firebase/app\";\nimport { ref } from \"yup\";\nexport async function uploadFile(ref, file) {\n  // let fileExt = file.type.split('/').pop();\n  // let fileName = Date.now() + Math.random().toString(36).substring(5) + '.' + fileExt;\n  // var storageRef = firebase.storage().ref(ref).child(fileName);\n  // return await (await storageRef.put(file)).ref.toString();\n\n}\nexport async function DbInsert(ref, data, skipIdGen = false) {\n  // let dbref = skipIdGen ? firebase.database().ref(ref) : firebase.database().ref(ref).push();\n  // return await dbref.set(data);\n}\nexport async function DbUpdate(ref, data) {\n  // let dbref = firebase.database().ref(ref);\n  // return await dbref.update(data);\n}\nexport function DbGet(refer) {\n  // return new Promise(async (res, rej) => {\n  //   try {\n  //     let ref = typeof (refer) === 'string' ? firebase.database().ref(refer) : refer;\n  //     let dataSnapshot = await ref.get();\n  //     let data = await dataSnapshot.toJSON();\n  //     res(data)\n  //   } catch (e) {\n  //     rej(e);\n  //   }\n\n  // });\n}\nexport async function deleteFile(url) {\n  // return await firebase.storage().refFromURL(url).delete();\n}\n/**\n * Fancy ID generator that creates 20-character string identifiers with the following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters that will sort properly).\n * 4. They're monotonically increasing.  Even if you generate more than one in the same timestamp, the\n *    latter ones will sort after the former ones.  We do this by using the previous random bits\n *    but \"incrementing\" them by 1 (only in the case of a timestamp collision).\n */\nexport const generatePushID = (function () {\n  // // Modeled after base64 web-safe chars, but ordered by ASCII.\n  // var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // // Timestamp of last push, used to prevent local collisions if you push twice in one ms.\n  // var lastPushTime = 0;\n  // // We generate 72-bits of randomness which get turned into 12 characters and appended to the\n  // // timestamp to prevent collisions with other clients.  We store the last characters we\n  // // generated because in the event of a collision, we'll use those same characters except\n  // // \"incremented\" by one.\n  // var lastRandChars = [];\n\n  // return function () {\n  //   var now = new Date().getTime();\n  //   var duplicateTime = (now === lastPushTime);\n  //   lastPushTime = now;\n\n  //   var timeStampChars = new Array(8);\n  //   for (var i = 7; i >= 0; i--) {\n  //     timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n  //     // NOTE: Can't use << here because javascript will convert to int and lose the upper bits.\n  //     now = Math.floor(now / 64);\n  //   }\n  //   if (now !== 0) throw new Error('We should have converted the entire timestamp.');\n\n  //   var id = timeStampChars.join('');\n\n  //   if (!duplicateTime) {\n  //     for (i = 0; i < 12; i++) {\n  //       lastRandChars[i] = Math.floor(Math.random() * 64);\n  //     }\n  //   } else {\n  //     // If the timestamp hasn't changed since last push, use the same random number, except incremented by 1.\n  //     for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n  //       lastRandChars[i] = 0;\n  //     }\n  //     lastRandChars[i]++;\n  //   }\n  //   for (i = 0; i < 12; i++) {\n  //     id += PUSH_CHARS.charAt(lastRandChars[i]);\n  //   }\n  //   if (id.length != 20) throw new Error('Length should be 20.');\n\n  //   return id;\n  // };\n})();\n\n","export const stringToObject = (stringCollection) => {\n    console.log(stringCollection);\n    let finalObj = new Object();\n    for (var pair of Object.entries(stringCollection)) {\n        let formattedKey = pair[0].replaceAll(/^\\/|\\/$/g, '');\n        formattedKey.split('/').reduce((acc, current, i, arr) => {\n            if (acc[current] === undefined) {\n                if (i === arr.length - 1) {\n                    acc[current] = pair[1];\n                    return acc;\n                }\n            }\n            if (typeof acc[current] == 'object') {\n                return acc[current];\n            }\n            else {\n                if (i === arr.length - 1) {\n                    acc[current] = pair[1];\n                    return acc;\n                }\n                acc[current] = {};\n                return acc[current];\n\n            }\n        }, finalObj);\n    }\n    return finalObj;\n\n}\nexport const getElementsOfType = (s, type, level = '') => {\n    let ret = {};\n    if (!Array.isArray(s))\n        return ret;\n    console.log(s)\n    s.map((e) => {\n        if (e.type === type) {\n            ret[`${level}/${e.key}`] = e;\n        }\n        if (e.type === 'collection') {\n            ret = { ...ret, ...getElementsOfType(e.schema, type, `${level}/${e.key}/$`) };\n        }\n        else if (e.type === 'json') {\n            ret = { ...ret, ...getElementsOfType(e.data, type, `${level}/${e.key}`) };\n        }\n    });\n    return ret;\n}\n\nexport const collectObjectValues = (obj, str) => {\n    if (!obj || typeof obj !== 'object') {\n        return null;\n    }\n    let ret = [];\n    let formattedKeyArray = str.replaceAll(/^\\/|\\/$/g, '').split('/');\n    let pos = formattedKeyArray.findIndex(e => e.search(/\\$/) === -1 ? false : true);\n    if (pos !== -1) {\n        let parent = getObjectValueUsingString(obj, formattedKeyArray.slice(0, pos).join('')),\n            after = formattedKeyArray.slice(pos + 1).join('/');\n        if (typeof parent === 'object' && !Array.isArray(parent) && parent !== null) {\n            if (after === '')\n                Object.keys(parent).forEach((e, i) => {\n\n                    ret.push(parent[e])\n                });\n            else\n                Object.keys(parent).forEach((e, i) => {\n\n                    ret.push(collectObjectValues(parent[e], after));\n                });\n        }\n    }\n    else\n        return getObjectValueUsingString(obj, str);\n    return ret;\n}\nexport const getObjectValueUsingString = (obj, str) => {\n    if (!obj || typeof obj !== 'object' || typeof str !== 'string') {\n        return null;\n    }\n    if (str === '' || str === '/')\n        return obj;\n    let formattedKeyArray = str.replaceAll(/^\\/|\\/$/g, '').split('/');\n    let acc = obj;\n    for (var current of formattedKeyArray) {\n        if (acc[current] === undefined) {\n            acc = acc[current];\n            break;\n        }\n        acc = acc[current];\n\n    }\n    return acc;\n}\nexport const collectionToJsonSchema = (c, keys) => {\n    if (!Array.isArray(keys))\n        return [];\n    if (keys.length === 0) {\n        return [];\n    }\n    let data = new Array();\n    keys.forEach((key) => {\n        data.push({ key: key, type: 'json', data: c.schema, notSub: true, parent: c });\n    });\n    return data;\n}\nexport const schemaToStringKeys = (map, level = '') => {\n    let ret = [];\n    if (!map || !Array.isArray(map))\n        return;\n    const fieldElements = map.map((e, i) => {\n        if (e.type == 'text' || e.type == 'textarea' || e.type == 'select' || e.type == 'image')\n            ret.push(`${level}/${e.key}`)\n\n\n        else if (e.type == 'json' || e.type == 'collection')\n            if (e.data)\n                ret.push(...schemaToStringKeys(e.data, `${level}/${e.key}`))\n\n    });\n    return ret;\n\n}\nexport const getValidationSchema = (map, level = '') => {\n    let ret = {};\n    if (!map || !Array.isArray(map))\n        return;\n    const fieldElements = map.map((e, i) => {\n        if (e.type == 'text' || e.type == 'textarea' || e.type == 'select' || e.type == 'image') {\n            if (e.validation)\n                ret[`${level}/${e.key}`] = e.validation\n\n        }\n        else if (e.type == 'json' || e.type == 'collection')\n            if (e.data)\n                getValidationSchema(e.data, `${level}/${e.key}`)\n\n    });\n    return ret;\n\n}","//import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/storage\";\nimport { DbGet, deleteFile } from '../functions/firebase';\nimport { getElementsOfType, collectObjectValues } from '../functions/objectStringSchema'\nexport const deleteFromDb = async (path) => {\n    // const ref = typeof path === 'string' ? firebase.database().ref(path) : path\n    // return new Promise(async (resolve, reject) => {\n    //     try {\n    //         let response = await ref.remove();\n    //         resolve(response);\n    //     }\n    //     catch (error) {\n    //         reject(error);\n    //     }\n    // })\n\n\n}\nexport async function deleteData(ref, struct) {\n    return new Promise((res, rej) => {\n\n        DbGet(ref).then((data) => {\n            let resources = [];\n            if (data)\n                for (const e of Object.keys(getElementsOfType(struct, 'image'))) {\n                    let values = collectObjectValues(data, e)\n                    console.log(e, values)\n                    if (values)\n                        Array.isArray(values) ? resources.push(...values) : resources.push(values)\n                }\n            console.log(resources)\n            deleteFromDb(ref).then(() => {\n                for (const e of resources) {\n                    e && deleteFile(e).catch((e) => console.log(e));\n                }\n                res(true)\n            }).catch((e) => {\n                rej(e);\n            })\n        }).catch((e) => {\n            console.log(e)\n            res(true)\n        })\n\n\n    });\n\n}\n\n// const deleteFromStorage = (storeId) => {\n//     const storage = firebase.storage();\n//     try{\n//         let response = storage.ref(`${url}`).delete();\n//         return response;\n//     }\n//     catch(error){\n//         throw new Error(`Error: ${error}`);\n//     }\n// }","import React from 'react';\n\n//import firebase from 'firebase/app';\n//import 'firebase/storage';\nimport { Link, useHistory, useLocation } from 'react-router-dom'\nimport schemaFactory from '../functions/schemaFactory'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { deleteFromDb as deleteData } from '../functions/deleteData';\n\n\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n    },\n});\n\n\n\n\n\nexport default function CardComponent({ data }) {\n\n    const [url, setUrl] = React.useState();\n    const [render,sr] = React.useState(false);\n    let location = useLocation()\n\n\n    const deleteCat = () => {\n        confirmAlert({\n            title: 'Confirm to delete',\n            message: 'Are you sure to do this.',\n            buttons: [\n                {\n                    label: 'Yes',\n                    onClick: () => {\n                        console.log( data.key)\n                        deleteData(`/categories/${data.key}`);\n                    }\n                },\n                {\n                    label: 'No',\n                    //onClick: () => alert('Click No')\n                }\n            ]\n        });\n    };\n\n    React.useEffect(() => {\n        // //wa....\n        // if(location.pathname === \"/categories\") sr(true);\n        // // else setpath('/store_details/services')\n        // async function getImage() {\n        //     try {\n        //         let res = await firebase.storage().refFromURL(data.value.img).getDownloadURL();\n        //         console.log(res)\n        //         setUrl(res);\n        //     }\n        //     catch (e) {\n        //         console.log(e)\n        //     }\n        // }\n        // getImage();\n    }, [])\n\n    \n\n    console.log('=======data====', data)\n    const classes = useStyles();\n    return (\n        <>\n            { data &&\n                <Card className={classes.root}>\n                    <CardActionArea>\n                        <CardMedia\n                            component=\"img\"\n                            alt={data.value?.label || data.value?.name}\n                            height=\"150\"\n                            image={process.env.REACT_APP_API_URL + 'static/Images/Category/'+data.value?.filename}\n                            title={data.value?.label || data.value?.name} \n                        />\n                        <CardContent>\n\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\" noWrap>\n                                {data.value?.label || data.value?.name}\n\n                            </Typography>\n                            {/*\n                                <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                                {data.value?.category}\n\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                {data.value?.charge}\n                            </Typography>\n                            */\n                            }\n                        </CardContent>\n                    </CardActionArea>\n\n                    {\n                        render &&\n                        <CardActions>\n                            <Link to={{\n                                pathname: \"/form\",\n                                state: {\n                                    heading: 'Edit Category',\n                                    schema: ['category', data.key],\n                                    action: 'update',\n                                }\n                            }}>\n                                <Button size=\"small\" color=\"primary\">Edit</Button>\n                            </Link>\n                            <Button size=\"small\" color=\"secondary\" onClick={() => {\n                                deleteCat()\n                            }}>Delete</Button>\n                        </CardActions>\n\n                    }\n\n\n\n\n                </Card>\n\n            }\n        </>\n    );\n}","import React from 'react';\n//import firebase from 'firebase/app';\nimport { Link,useHistory } from \"react-router-dom\";\n//import 'firebase/database';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Container, Fab } from '@material-ui/core/';\nimport AddIcon from '@material-ui/icons/Add';\nimport Card from '../components/Card';\nimport schemaFactory from '../functions/schemaFactory'\nimport axios from 'axios';\nimport { CButton } from '@coreui/react';\nimport toast from 'react-hot-toast';\n//import history from '../history';\nimport { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory();\nexport const useStyles = makeStyles({\n    fab: {\n        margin: '0',\n        top: 'auto',\n        right: '30px',\n        bottom: '30px',\n        left: 'auto',\n        position: 'fixed',\n    }\n});\n\nexport default function Categories() {\n    const classes = useStyles();\n \n    const [data, update] = React.useState([]);\n\n//  const history = useHistory();\n\n    React.useEffect(() => {\n        const init = async () => {\n            // let category = firebase.database().ref('/categories');\n            // return category.on('value', (snapshot) => {\n            //     update(snapshot.val())\n            // });\n\n            axios({ method: 'GET', url: process.env.REACT_APP_API_URL + 'api/category/getall' })\n                .then(function (response) {\n                    if (response.status == 200) {\n                        console.log('=======response.data========', response.data);\n                        update(response.data.data)\n                    }\n                }).catch(function (error) {\n                    console.log(error);\n                });\n        }\n        init()\n    }, []);\n\n    const hanldeDelete = (id) => {\n        console.log('iiiii ', id);\n        axios.post(process.env.REACT_APP_API_URL + 'api/category/delete', { id })\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log('=======response.data========', response.data);\n                    // update(response.data.data)\n                    toast.success('Deleted!');\n                    window.location.reload(false);\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n    };\n    // const someEventHandler = (id) => {\n    //     history.push({\n\n    \n    //         pathname: `/categoriess`,\n    //         state: {\n    //             heading: 'Edit category',\n    //             schema: ['category'],\n    //             action: 'push',\n    //         }\n    //     });\n    //  //   window.location.reload(false);\n\n    //   //  window.location.reload(false);\n \n    //  };\n \n \n \n\n    return (data !== null ? (\n        <Container>\n            <Grid container spacing={2}>{\n                Object.keys(data).map(element => (\n\n                    <Grid item xs={6} sm={3}>\n                        <Card data={{ value: data[element], key: element }} key={element} />\n\n                        <Link \n\nto={{\n    pathname: \"/categories-edit/\"+data[element].id,\n    state: {\n        heading: 'Edit category',\n        schema: ['category'],\n        action: 'update',\n    }\n}}\n                    \n                    \n                    \n                    >\n                        \n \n<CButton color=\"warning\" className=\"px-4\">\n    Edit\n</CButton>\n \n                    </Link>\n\n                         \n                        <CButton color=\"danger\" className=\"px-4\" onClick={() => hanldeDelete(data[element].id)}>\n                            Delete\n                        </CButton>\n                    </Grid>\n                ))\n            }\n\n            </Grid>\n            <Link to={{\n                pathname: \"/form\",\n                state: {\n                    heading: 'Add category',\n                    schema: ['category'],\n                    action: 'push',\n                }\n            }}>\n                <Fab color=\"primary\" className={classes.fab} aria-label=\"add\">\n                    <AddIcon />\n                </Fab>\n            </Link>\n        </Container>\n    ) : (<Container>\n        <h1>No Data</h1>\n        <Link to={{\n            pathname: \"/form\",\n            state: {\n                heading: 'Add category',\n                schema: ['category'],\n                action: 'push',\n            }\n        }}>\n            <Fab color=\"primary\" className={classes.fab} aria-label=\"add\">\n                <AddIcon />\n            </Fab>\n        </Link>\n    </Container>)\n    )\n}","import React, { useEffect } from 'react';\n//import firebase from 'firebase/app';\nimport \"firebase/database\";\nimport \"firebase/storage\";\nimport { useHistory, Link } from 'react-router-dom';\nimport { useStyles } from './Categories';\nimport toast, { Toaster } from 'react-hot-toast';\nimport {\n    Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, IconButton, Container\n} from '@material-ui/core/';\nimport { Fab } from '@material-ui/core/';\nimport AddIcon from '@material-ui/icons/Add';\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport axios from 'axios';\nimport { CButton } from '@coreui/react';\n import ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\n\nconst pagination = paginationFactory({\n    page: 1,\n    sizePerPage: 10,\n});\n\nfunction view(history, key) {\n    history.push({\n        pathname: '/view',\n        id: key,\n    })\n}\n\n// function edit(history, key) {\n//     history.push({\n//         pathname: '/store/add',\n//         state: {\n//             heading: 'Update store',\n//             schema: ['stores_full', key],\n//             action: 'update',\n//         },\n//     })\n// }\n\n\nexport default function Stores() {\n     const { SearchBar } = Search;\n\n    const classes = useStyles();\n    const [data, update] = React.useState([]);\n\n\n    useEffect(() => {\n\n\n        axios.get(process.env.REACT_APP_API_URL + 'api/store/getall')\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log('=======response.data========', response.data);\n                    update(response.data.data)\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n    }, []);\n\n    const actionsFormatter = (cell, row) => {\n        return (\n            <>\n                <Link to={\"/store/edit/\" + row.id}>\n\n                    <CButton color=\"warning\" className=\"px-4\">\n                        Edit\n                    </CButton>\n                </Link>\n\n                <CButton color=\"danger\" className=\"px-4\" onClick={() => hanldeDelete(row.id)}>\n                    Delete\n                </CButton>\n            </>\n        );\n    };\n\n    const hanldeDelete = (id) => {\n        console.log('iiiii ',id);\n        axios.post(process.env.REACT_APP_API_URL + 'api/store/delete', {id})\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log('=======response.data========', response.data);\n                    // update(response.data.data)\n                    toast.success('Deleted!');\n                    window.location.reload(false);\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n    }\n\n\n    const columns = [\n        {\n            dataField: \"id\",\n            text: \"ID\",\n            isDummyField: true,\n            formatter: (cell, row, rowIndex) => ++rowIndex,\n        },\n        {\n            dataField: \"name\",\n            text: \"Name\",\n            searchable: true,\n        },\n        {\n            dataField: \"category\",\n            text: \"Category\",\n            searchable: true,\n        },\n        {\n            dataField: \"phone\",\n            text: \"Phone Number\",\n            searchable: true,\n        },\n        {\n            dataField: \"location\",\n            text: \"Location\",\n            searchable: true,\n        },\n        {\n            dataField: \"pin\",\n            text: \"Pin\",\n            searchable: true,\n        },\n        {\n            dataField: \"claim\",\n            text: \"Offer Claim\",\n            searchable: true,\n        },\n\n        {\n            dataField: \"actions\",\n            text: \"Actions\",\n            isDummyField: true,\n            csvExport: false,\n            formatter: actionsFormatter,\n        },\n    ];\n      \n\n    return (\n        <>\n            <Container>\n\n\n            <ToolkitProvider\n  keyField=\"id\"\n  data={ data }\n  columns={ columns }\n  search\n>\n  {\n    props => (\n      <div>\n        <h3>Search Store Details :</h3>\n        <SearchBar { ...props.searchProps } />\n        <hr />\n        <BootstrapTable\n          { ...props.baseProps }\n          pagination={pagination}\n          wrapperClasses=\"table-responsive\"\n        />\n      </div>\n    )\n  }\n</ToolkitProvider> \n\n            \n{/* \n                <BootstrapTable\n                    keyField=\"id\"\n                    data={data}\n                    columns={[\n                        {\n                            dataField: \"id\",\n                            text: \"ID\",\n                            isDummyField: true,\n                            formatter: (cell, row, rowIndex) => ++rowIndex,\n                        },\n                        {\n                            dataField: \"name\",\n                            text: \"Name\",\n                            searchable: true,\n                        },\n                        {\n                            dataField: \"phone\",\n                            text: \"Phone Number\",\n                            searchable: true,\n                        },\n                        {\n                            dataField: \"location\",\n                            text: \"Location\",\n                            searchable: true,\n                        },\n                        {\n                            dataField: \"pin\",\n                            text: \"Pin\",\n                            searchable: true,\n                        },\n\n                        {\n                            dataField: \"actions\",\n                            text: \"Actions\",\n                            isDummyField: true,\n                            csvExport: false,\n                            formatter: actionsFormatter,\n                        },\n                    ]}\n                    pagination={pagination}\n                    wrapperClasses=\"table-responsive\"\n                /> */}\n\n\n                {/* <Link to={{\n                    pathname: \"/form\",\n                    state: {\n                        heading: 'Add Store',\n                        schema: ['stores_full'],\n                        action: 'push',\n                    }\n                }}>\n                    <Fab color=\"primary\" className={classes.fab} aria-label=\"add\">\n                        <AddIcon />\n                    </Fab>\n                </Link> */}\n                <Link to={{\n                    pathname: \"/store/add\",\n                    state: {\n                        heading: 'Add Store',\n                        schema: ['stores_full'],\n                        action: 'push',\n                    }\n                }}>\n                    <Fab color=\"primary\" className={classes.fab} aria-label=\"add\">\n                        <AddIcon />\n                    </Fab>\n                </Link>\n                <Toaster />\n            </Container>\n\n        </>\n    )\n}\n","import React from 'react';\nimport firebase from 'firebase/app';\nimport \"firebase/database\";\nimport \"firebase/storage\"\nimport { Container, Typography, Grid, Paper } from '@material-ui/core';\nimport Card from '../components/Card'\n\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport CategoryIcon from '@material-ui/icons/Category';\n\nimport { useLocation } from 'react-router-dom'\n\nasync function getData(id) {\n    return new Promise(async (resolve, reject) => {\n        const db = firebase.database();\n        try {\n            const storeSnapshot = await db.ref('/stores/' + id).once('value');\n            const storeDetailsSnapshot = await db.ref('/store_details/' + id).once('value');\n            resolve({ ...storeSnapshot.val(), ...storeDetailsSnapshot.val() })\n        }\n        catch (e) {\n            reject(e)\n        }\n    });\n}\n\n\nexport default function ViewStoreDetails() {\n    let location = useLocation();\n    let id = location.id;\n    const [data, setData] = React.useState(null)\n    React.useEffect(() => {\n        getData(id)\n            .then((result) => {\n                console.log(result)\n                setData(result);\n            })\n            .catch(e => {\n                console.log(e)\n                // throw new Error(e);\n            })\n    }, []);\n    if (data)\n        return (\n            <Container component={Paper}>\n                <Grid>\n                    <Typography gutterBottom variant=\"h3\" component=\"h2\">\n                        {data.name}\n                    </Typography>\n                    <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                        {data.desciption}\n                    </Typography>\n\n\n\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        <CategoryIcon></CategoryIcon>\n                        <span>{data.category}</span>\n                    </Typography>\n\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        <LocationOnIcon></LocationOnIcon>\n                        <span>{data.location}</span>\n                    </Typography>\n\n                </Grid>\n\n\n                { data.services &&\n                    <Grid>\n                        <Typography gutterBottom variant=\"h4\" component=\"h2\">Services</Typography>\n                        <Grid container spacing={2}>{\n                            Object.keys(data.services).map(element => (\n                                <Grid item xs={6} sm={3}>\n                                    <Card data={{ value: data.services[element], key: element }} key={element} />\n                                </Grid>\n                            ))\n                        }\n                        </Grid>\n                    </Grid>\n                }\n\n            </Container>\n\n        )\n    else\n        return <></>\n}","export function arrayIntersect(x, y) {\n    var ret = [];\n    for (var i = 0; i < x.length; i++) {\n        for (var z = 0; z < y.length; z++) {\n            if (x[i] == y[z]) {\n                ret.push(x[i]);\n                break;\n            }\n        }\n    }\n    return ret;\n\n}\nexport function arrayDifference(x, y) {\n    let ret = x.filter(e=>!y.some(k=>k===e));\n    return ret;\n}\nexport function objectDifference(a, b) {\n    let ret = { ...a },\n        x = Object.keys(a),\n        y = Object.keys(b);\n    for (var i = 0; i < x.length; i++) {\n        for (var z = 0; z < y.length; z++) {\n            if (x[i] == y[z]) {\n                delete ret[x[i]];\n                break;\n            }\n        }\n    }\n    return ret;\n\n}\nexport function removeEmptyProperties(obj) {\n    return Object.fromEntries(\n        Object.entries(obj)\n            .filter(([_, v]) => v != null)\n            .map(([k, v]) => [k, v === Object(v) ? removeEmptyProperties(v) : v])\n    );\n}\nexport function getFilteredValues(obj, regexp) {\n    if (typeof obj !== 'object' || obj === null)\n        return [];\n    let ret = [];\n    Object.values(obj).forEach(e => {\n\n    })\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n//import firebase from 'firebase/app';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport './form.css';\nconst ImageUpload = React.forwardRef(({ title, defaultImage, name, src}, ref) => {\n    const inputRef = React.useRef();\n    React.useImperativeHandle(ref, () => ({\n        clearInputs: () => {\n            inputRef.current.value = null;\n\n        },\n        clearImages: () => {\n            setImgState([{ currentFile: null, previewImage: defaultImage, }]);\n        }\n    }));\n    React.useEffect(() => {\n        async function getImage() {\n            setLoading(true);\n            try {\n                // let res = await firebase.storage().refFromURL(src).getDownloadURL();\n                // setImgState({\n                //     currentFile: null,\n                //     previewImage: res\n                // });\n            }\n            catch (e) {\n                setImgState([{ currentFile: defaultImage, previewImage: defaultImage, }]);\n                console.log(e)\n            }\n            setLoading(false);\n        }\n        if (src){\n            console.log('----src-----', src);\n        }\n            // if (src.match(/^(gs:\\/\\/)/))\n            //     getImage();\n            // else if (src.match(/^(https:\\/\\/)/))\n            //     setImgState({currentFile: null,  previewImage: src });\n    }, [src]);\n    const [loading, setLoading] = React.useState(false);\n    const [imgState, setImgState] = React.useState([{ currentFile: src ? null : defaultImage, previewImage: src ? null : defaultImage, }]);\n    function selectFile(event) {\n        //console.log('----target-----', event.target.files.length);\n        let img = [];\n        for (let i = 0; i < event.target.files.length; i++) {\n            let image =  event.target.files[i];\n            if (image.type.startsWith('image/')) {\n                //console.log('----mapData-----', image);\n                img.push({ currentFile:image, previewImage: URL.createObjectURL(image) });\n            }\n        }\n        console.log('----img-----', img);\n        setImgState(img);\n    }\n    function clickInput() {\n        inputRef.current.click();\n    }\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={3}>\n                {title}\n            </Grid>\n            <Grid item xs={9}>\n                <input\n                    ref={inputRef}\n                    hidden\n                    accept=\"image/*\"\n                    type=\"file\"\n                    onChange={selectFile}\n                    multiple\n                    name={name || \"\"}\n                />                \n                {\n                    loading ? <Skeleton variant=\"rect\" width={210} height={118} animation=\"wave\" />\n                        :\n                        imgState.map((mapData) => {\n                            //console.log('------mapData----', mapData)\n                            return (\n                                <img src={mapData.previewImage}\n                                    alt={name}\n                                    onError={() => setImgState([{\n                                        currentFile: null,\n                                        previewImage: defaultImage,\n                                    }])}\n                                    className=''\n                                    onClick={clickInput}></img>\n                            )\n                        })\n\n                }\n            </Grid>\n\n        </Grid>\n    );\n});\nexport default ImageUpload;","export default __webpack_public_path__ + \"static/media/Placeholder.65c08d09.jpg\";","/*\nComponent to create a form which update/add data to firebase realtime datebase\n\nprops-\n    1. heading <string>: The heading that get displayed on top of the form\n    2. action <string>: Action to perform using the data. Possible values are 'update' and 'push'.\n                        While using 'push' a new key is generated the data is written to at that location.\n    3. schema<object>: The schema that represent the structure of data and location to which data and images are added;\n                Properties of schema \n                    1. to<string>:location in database to which data is to be added/updated.\n                    2. imgLocation<string>: location in storage to which images are to be uploaded.\n                    3. data<array>:structure of data in the database. This structure is used to generate the form.\n                                Elements inside the array represent the data to be written in database and may correspond\n                                to feilds or input inside the form.\n                                Each element<object> has properties\n                                    1. key<string>:key in database\n                                    2. type<string>:Type of input required, possible values are text,textfield,image,select,json,collection.\n                                    3. displayName<string>: Label of input field.\n                                According to the value of 'type' other properties are avalable.It include\n                                    For type 'json'\n                                        -data<array>\n                                        -notSub<boolean>\n                                    For type 'collection'\n                                        -schema<array>\n                                        And all of that of 'json'\n                                    For type 'select'\n                                        -values<array>||<string>\n        schema prop can also be array of the above object\n    4. sameKey<boolean>: Whether to use the same key while adding new data when multiple schemas are used.\n\nschema.data in detail:\n    Each entry in schema.data represent input field(s). Type 'text','textfield', 'image' are straight forward. Type 'image'\n    corresponds to a image element using which a user can insert image. The image will be uploaded to schema.imgLocation in\n    storage, and it's url in database.\n\n    For type 'select' an additional property 'values' is available which provide the values for select input.\n    'values' can be an array of values to be shown or string, in that case values are fetched from database.\n    The value of that string can be the location at which the array of values are present.For eg: a/b/c\n    But if the values are present in multiple location but under the same structure wild cards can be used.\n    For eg: If the structure is\n                a:{\n                    b:{\n                        name:\n                    },\n                    c:{\n                        name:\n                    },\n                    d:{\n                        name:\n                    }\n                }\n            It should be a/$/name\n    \n    Type 'json' represent collection of data. For example:\n                a:{\n                    b:val1,\n                    c:val2,\n                    d:val2,\n                }\n            Here the key is a and data is an array containing corresponding fields of b,c and d\n    The whole purpose of 'json' is to visually show the structure of data ie you can use key:a/b also, it will not show the structure visually.\n    \n    Type 'collection' is used when a collection of json whose strucure is same is to be shown. A button to add a new unit and a button to remove\n    each unit will be provided in the form. To represent a unit schema is used. For eg:\n                To add data of this format 'collection' can be used\n                    a{\n                        b:X,\n                        c:X,\n                        d:X,\n                        ...\n                    }\n                X is a json of same structure, which is described in 'schema' property\n    For types 'json' and 'collection' property 'notSub' is available which indicates if the fields inside should \n    contained in the parent container or not.\n\n    Every input element corresponding to schema.data will be placed in a grid.Sub items inside 'json' and 'collection'\n    will be contained inside the parent item. To not show this behavior and place sub item in the parent grid 'notSub'\n    should be true.\n\n\n    Example:\n        <Form heading='test' action='push' sameKey={true} schema={schema} />\n        schema = [\n    {\n        to: '/stores/',\n        imgLocation: 'stores/',\n        data: [\n            { key: 'name', type: 'text', displayName: 'name' },\n            { key: 'location', type: 'text', displayName: 'Location' },\n            { key: 'category', type: 'select', displayName: 'category', values: '/categories/$1/name' },\n            { key: 'desciption', type: 'textarea', displayName: 'discription' },\n            { key: 'img', type: 'image', displayName: 'Image' },\n            { key: 'phone', type: 'text', displayName: 'phone' },\n            { key: 'stars', type: 'text', displayName: 'stars' },\n            {\n                key: 'coords', type: 'json', displayName: 'coordinates', notSub: true, data: [\n                    { key: 'latitude', type: 'text', displayName: 'latitude' },\n                    { key: 'longitude', type: 'text', displayName: 'longitude' },\n                ]\n            },\n            {\n                key: 'urls', type: 'json', displayName: 'Links', notSub: true, data: [\n                    { key: 'instagram', type: 'text', displayName: 'Instagram' },\n                    { key: 'dribbble', type: 'text', displayName: 'Website' },\n                ]\n            }\n\n        ]\n    },\n    {\n        to: '/store_details/',\n        imgLocation: 'stores/',\n        data: [\n            { key: 'bannerImg', type: 'image', displayName: 'Banner image' },\n            {\n                key: 'services', type: 'collection', displayName: 'Services', notSub: true, schema: [\n                    { key: 'name', type: 'text', displayName: 'Name' },\n                    { key: 'charge', type: 'text', displayName: 'Charge' },\n                    { key: 'img', type: 'image', displayName: 'Image' },\n\n                ]\n            },\n        ]\n\n    }\n\n];\n\n*/\n\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Fab from '@material-ui/core/Fab';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { useNotFormik } from '../functions/useNotFormik'\nimport { uploadFile, DbInsert, DbUpdate, generatePushID, DbGet, deleteFile } from '../functions/firebase';\nimport { stringToObject, getObjectValueUsingString, collectionToJsonSchema, collectObjectValues, schemaToStringKeys, getValidationSchema, getElementsOfType } from '../functions/objectStringSchema';\nimport { arrayIntersect, arrayDifference, objectDifference, removeEmptyProperties } from '../functions/general'\nimport UImage from './ImageUpload';\nimport img from '../Placeholder.jpg';\nimport toast, { Toaster } from 'react-hot-toast';\nimport copy from \"fast-copy\";\nimport merge from 'deepmerge';\nimport * as Yup from 'yup';\nimport axios from 'axios';\n\nconst validationSchema = Yup.object().shape({\n    ['/stores/category']: Yup.string()\n        .required('Required'),\n    ['/stores/name']: Yup.string()\n        .required('Required'),\n\n});\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: 100,\n        color: '#fff',\n    },\n    card: {\n        backgroundColor: 'rgba(255,255,255,1)',\n        marginBottom: '10px',\n        boxShadow: '1px 1px 4px -2px rgba(0,0,0,0.59)',\n\n    },\n    submitArea: {\n        margin: '30px 0 10px 0'\n    },\n    form: {\n        margin: '5px 0 20px 0'\n    }\n\n}));\n\nconst resolveDependentData = (schema) => {\n    //console.log('----------resolveDependentData---------');\n    return new Promise(async (res, rej) => {\n        let s = copy(schema);\n        for (const e of s) {\n            if (e.type === 'select') {\n                if (typeof e.values === 'string') {\n                    let pos = e.values.search(/\\$/);\n                    if (pos !== -1) {\n                        let before = e.values.slice(0, pos),\n                            after = e.values.slice(pos);\n                        try {\n                            let baseData = await DbGet(before);\n                            let data = collectObjectValues(baseData, after);\n                            e.values = Array.isArray(data) ? data : [];\n                        }\n                        catch (error) {\n                            e.values = [];\n                            rej(error);\n                        }\n\n\n                    }\n                    else { //not tested\n                        let data = DbGet(e.values)\n                        e.values = data;\n                    }\n                }\n                else if (!Array.isArray(e.values))\n                    e.values = [];\n            }\n            if (e.type === 'json') {\n                e.data = await resolveDependentData(e.data);\n            }\n            if (e.type === 'collection')\n                e.schema = await resolveDependentData(e.schema);\n\n        }\n\n        res(s);\n    });\n\n}\n\nconst removeFromSchema = (schema, objString) => {\n    //console.log('----------removeFromSchema---------');\n    if (objString) {\n        let formattedKey = objString.replaceAll(/^\\/|\\/$/g, '').split('/');\n        if (formattedKey.length === 1) {\n            schema.data.forEach((e, i) => {\n                if (e.key === formattedKey[0])\n                    schema.data.splice(i, 1);\n            });\n        }\n        else if (formattedKey.length > 1) {\n            schema.data.forEach((e) => {\n                if (e.key === formattedKey[0])\n                    removeFromSchema(e, formattedKey.slice(1).join(''))\n            });\n        }\n\n    }\n}\n\nconst addToSchema = (schema, objString, item) => {\n    //console.log('----------addToSchema---------');\n    if (objString) {\n        let formattedKey = objString.replaceAll(/^\\/|\\/$/g, '').split('/');\n        if (formattedKey.length === 1) {\n            schema.data.forEach((e, i) => {\n                if (e.key === formattedKey[0]) {\n                    if (!e.data)\n                        e.data = []\n                    if (Array.isArray(item))\n                        e.data.push(...item);\n                    else\n                        e.data.push(...item);\n\n                }\n            });\n        }\n        else if (formattedKey.length > 1) {\n            schema.data.forEach((e) => {\n                if (e.key === formattedKey[0])\n                    addToSchema(e, formattedKey.slice(1).join(''), item)\n            });\n        }\n    }\n}\n\nconst deleteImages = (images) => {\n    //console.log('----------deleteImages---------');\n    return new Promise(async (res, rej) => {\n        let result = { deleted: [], failed: [] }\n        for (var k of images) {\n            try {\n                let del = await deleteFile(k);\n                result.deleted.push(k);\n            }\n            catch (e) {\n                console.log(e);\n                result.failed.push(k);\n            }\n        }\n        res(result);\n    });\n\n}\n\nconst jsonToFormMap = (json, level = '') => {\n    // //console.log('----------jsonToFormMap---------');\n    if (!json)\n        return {};\n    const formMap = new Object();\n    for (var p of Object.entries(json)) {\n        if (typeof p[1] === 'object') {\n            Object.assign(formMap, jsonToFormMap(p[1], `${level}/${p[0]}`));\n        }\n        else\n            formMap[`${level}/${p[0]}`] = p[1];\n    }\n    //console.log('----------formMap---------',formMap);\n    return formMap;\n}\n\nconst getFiles = (formObject) => {\n    //console.log('----------getFiles---------');\n    let files = {}\n    let keys = Object.keys(formObject);\n    for (var k of keys) {\n        if (formObject[k] instanceof File) {\n            console.log('----------k---------', k);\n            files[k] = formObject[k];\n        }\n    }\n    return files;\n}\n\nconst removeEmptyFiles = (files) => {\n    //console.log('----------removeEmptyFiles---------');\n    let f = { ...files };\n    let keys = Object.keys(f);\n    for (var k of keys) {\n        if (f[k].size === 0) {\n            delete f[k];\n        }\n    }\n    return f;\n}\n\nconst resolveEmptyFiles = (formObject, data) => {\n    //console.log('----------resolveEmptyFiles---------');\n    let f = getFiles(formObject);\n    let keys = Object.keys(f);\n    for (var k of keys) {\n        if (f[k].size === 0) {\n            if (data && data[k])\n                formObject[k] = data[k];\n            else\n                delete formObject[k];\n        }\n    }\n    return formObject;\n}\n\nconst uploadImages = (files, imgLocation) => {\n    //console.log('----------uploadImages---------');\n    return new Promise(async (res, rej) => {\n        let result = { uploaded: {}, failed: {} }\n        let keys = Object.keys(files);\n        //console.log('----------result---------',result);\n        //console.log('----------keys---------',keys);\n        for (var k of keys) {\n            try {\n                let imgUrl = await uploadFile(imgLocation, files[k]);\n                result.uploaded[k] = imgUrl;\n            }\n            catch (e) {\n                console.log(e);\n                result.failed[k] = files[k];\n            }\n        }\n        res(result);\n    });\n\n}\n\nconst submitData = (formData, action, to, key, heading, toastId) => {\n    //console.log('----------submitData----formData-----', formData);\n    // console.log('----------submitData----action-----', action);\n    //console.log('----------submitData----to-----', to);\n    // console.log('----------submitData----key-----', key);\n    //console.log('----------submitData----heading-----', heading);\n\n    if (action === 'update') {\n        switch (heading) {\n            case 'Add category':\n                console.log('----------Update Category-------misfer');\n                break;\n            case 'Ad Banner':\n                console.log('----------Ad Banner-----');\n                Object.entries(formData).map(([k, v]) => {\n                    console.log('----------k-----', k.replace('/ads/frontPage/RQJCOSIF4JF/', ''));\n                    console.log('----------v-----', v);\n                    const pushData = new FormData();\n                    pushData.append(\"image\", v);\n                    axios({ method: 'POST', url: process.env.REACT_APP_API_URL + 'api/banner/create', data: pushData, headers: { 'Content-Type': 'multipart/form-data' } })\n                        .then(function (response) {\n                            if (response.status == 200) {\n                                console.log(response.data);\n                                toast.dismiss(toastId);\n                                toast.success('Added!');\n                                window.location.reload(false);\n                            }\n                        }).catch(function (error) {\n                            console.log(error);\n                            toast.dismiss(toastId);\n                            toast.error('Upload Failed');\n                        });\n                });\n                break;\n        }\n    } else if (action == 'push') {\n        switch (heading) {\n            case 'Add category':\n                console.log('----------Add New Category-----');\n                const pushData = new FormData();\n                Object.entries(formData).map(([k, v]) => {\n                    //console.log('----------k-----', k.replace('/categories/', ''));\n                    // console.log('----------v-----', v);\n                    let Key = k.replace('/categories/', '');\n                    console.log('----------Key-----', Key);\n                    if (Key == 'name') {\n                        pushData.append(\"name\", v);\n                    }\n                    if (Key == 'label') {\n                        pushData.append(\"label\", v);\n                    }\n                    if (Key == 'img') {\n                        pushData.append(\"image\", v);\n                    }\n                });\n                pushData.append(\"auth_user\", localStorage.getItem('user_id'));\n                //console.log('----------pushData-----', pushData);\n                axios({ method: 'POST', url: process.env.REACT_APP_API_URL + 'api/category/create', data: pushData, headers: { 'Content-Type': 'multipart/form-data' } })\n                    .then(function (response) {\n                        if (response.status == 200) {\n                            console.log(response.data);\n                            toast.dismiss(toastId);\n                            toast.success('Added!');\n                            window.location.reload(false);\n                        }\n                    }).catch(function (error) {\n                        console.log(error);\n                        toast.dismiss(toastId);\n                        toast.error('Upload Failed');\n                    });\n                break;\n            case 'Add Store':\n                //console.log('----------Ad Banner-----');\n                Object.entries(formData).map(([k, v]) => {\n                    const postData = new FormData();\n                    //console.log('----------v-----', v);  \n                    let Key = k.replace('/stores/', '');\n                    console.log('----------Key-----', Key);\n                    if (Key == 'name') {\n                        //console.log('----------name-----', v);\n                        postData.append(\"name\", v);\n                    }\n                    if (Key == 'location') {\n                        // console.log('----------location-----', v);\n                        postData.append(\"location\", v);\n                    }\n                    if (Key == 'category') {\n                        //console.log('----------category-----', v);\n                        postData.append(\"category\", v);\n                    }\n                    if (Key == 'desciption') {\n                        // console.log('----------desciption-----', v);\n                        postData.append(\"desciption\", v);\n                    }\n                    if (Key == 'phone') {\n                        // console.log('----------phone-----', v);\n                        postData.append(\"phone\", v);\n                    }\n                    if (Key == 'stars') {\n                        // console.log('----------stars-----', v);\n                        postData.append(\"stars\", v);\n                    }\n                    if (Key == 'coords/latitude') {\n                        //console.log('----------latitude-----', v);\n                        postData.append(\"latitude\", v);\n                    }\n                    if (Key == 'coords/longitude') {\n                        // console.log('----------longitude-----', v);\n                        postData.append(\"longitude\", v);\n                    }\n                    if (Key == 'urls/instagram') {\n                        console.log('----------instagram-----', v);\n                        postData.append(\"instagram\", v);\n                    }\n                    if (Key == 'urls/dribbble') {\n                        console.log('----------dribbble-----', v);\n                        postData.append(\"dribbble\", v);\n                    }\n                    if (Key == 'img') {\n                        // console.log('----------image-----', v);\n                        postData.append(\"image\", v);\n                    }\n                    if (Key == 'bannerImg') {\n                        console.log('----------bannerImg-----', v);\n                        postData.append(\"bannerImg\", v);\n                    }\n                    console.log('----------postData-----', postData);\n                    axios({ method: 'POST', url: process.env.REACT_APP_API_URL + 'api/store/create', data: postData, headers: { 'Content-Type': 'multipart/form-data' } })\n                    .then(function (response) {\n                        if (response.status == 200) {\n                            console.log(response.data);\n                            // toast.dismiss(toastId);\n                            // toast.success('Added!');\n                            // window.location.reload(false);\n                        } else {\n                            // toast.dismiss(toastId);\n                            // toast.error('Upload Failed');\n                        }\n                    }).catch(function (error) {\n                        console.log(error);\n                        // toast.dismiss(toastId);\n                        // toast.error('Upload Failed');\n                    });\n                });\n\n                \n                break;\n            case 'Ad Banner':\n                //console.log('----------Ad Banner-----');\n                Object.entries(formData).map(([k, v]) => {\n                    console.log('----------k-----', k.replace('/ads/frontPage/RQJCOSIF4JF/', ''));\n                    console.log('----------v-----', v);\n                    const pushData = new FormData();\n                    pushData.append(\"image\", v);\n                    axios({ method: 'POST', url: process.env.REACT_APP_API_URL + 'api/banner/create', data: pushData, headers: { 'Content-Type': 'multipart/form-data' } })\n                        .then(function (response) {\n                            if (response.status == 200) {\n                                console.log(response.data);\n                                toast.dismiss(toastId);\n                                toast.success('Added!');\n                                window.location.reload(false);\n                            }\n                        }).catch(function (error) {\n                            console.log(error);\n                            toast.dismiss(toastId);\n                            toast.error('Upload Failed');\n                        });\n                });\n                break;\n\n        }\n    } else if (action === 'delete') {\n        console.log('----------action === delete-----');\n    }\n    // formData = removeEmptyProperties(copy(formData));\n    // if (Object.keys(formData).length > 0) {\n    //     let f = stringToObject(formData);\n    //     f = getObjectValueUsingString(f, to);\n    //     if (f) {\n\n    //         if (action === 'update') {\n    //             console.log('----------submitData----update-----',to, f, true);\n    //             return DbInsert(to, f, true);\n\n    //         }\n    //         else if (action === 'push') {\n    //             if (key) return DbInsert(to.replace(/\\/$/, '') + `/${key}`, f, true);\n    //             console.log('----------submitData----push-----',to, f);\n    //             return DbInsert(to, f);\n    //         }\n\n    //     }\n    // }\n    // return true;\n}\n\nconst createSchemaCollection = (schema) => {\n    ////console.log('----------createSchemaCollection---------');\n    return schema ?\n        !Array.isArray(schema) ? { [schema.to.replaceAll(/^\\/|\\/$/g, '')]: schema } : Object.fromEntries(schema.map((e, i) => { return [e.to.replaceAll(/^\\/|\\/$/g, ''), e] }))\n        : null;\n}\n\nconst getStringKeysFromSchema = (currentSchema) => {\n    //console.log('----------getStringKeysFromSchema---------');\n    let ret = []\n    for (const k of Object.keys(currentSchema)) {\n        //console.log('----------getStringKeysFromSchema---------');\n        ret.push(...schemaToStringKeys(currentSchema[k].data).map(e => `/${k}${e}`))\n    }\n    return ret;\n}\n\nexport default function Form({ heading, schema, action, sameKey }) {\n\n    const location = useLocation();\n    const history = useHistory();\n    const [resolvedSchema, updateResolvedSchema] = React.useState({});\n    const [submitting, updateSubmitting] = React.useState(false);\n    const [loading, updateLoading] = React.useState(false);\n    const [nodeData, updateNodeData] = React.useState(null);\n    const [categoryData, setCategoryData] = React.useState([]);\n    const [currentSchema, updateCurrentSchema] = React.useState(createSchemaCollection(schema));\n    const [validationSchema, updateValidationSchema] = React.useState(null);\n    const inputsRef = React.useRef({});\n    const forms = React.useRef({});\n    const classes = useStyles();\n    const formik = useFormik({ initialValues: jsonToFormMap(categoryData), enableReinitialize: true, validationSchema: validationSchema, });\n    //abc\n    const updateS = (key) => (val) => updateCurrentSchema(prev => { return { ...prev, [key]: val } })\n    const updateN = (key) => (val) => updateNodeData(prev => { return { ...prev, [key]: val } });\n    const initialize = async (schema, updateSchema, updateNode) => {\n        //console.log('----------initialize---------');\n        updateLoading(true);\n        let updatedSchema = await resolveDependentData(schema.data);\n        let schemaC = copy(schema);\n        schemaC.data = updatedSchema;\n        updateSchema(schemaC);\n        if (action === 'update') {\n            let data = await DbGet(schema.to);\n            if (data) {\n                let collections = getElementsOfType(schemaC.data, 'collection');\n                Object.keys(collections).map((e) => {\n                    let cNode = getObjectValueUsingString(data, e);\n                    if (typeof cNode === 'object' && cNode !== null) {\n                        let sc = collectionToJsonSchema(collections[e], Object.keys(cNode));\n                        console.log(sc)\n                        let s = copy(schemaC);\n                        addToSchema(s, e, sc);\n                        updateSchema(s);\n                    }\n                });\n            }\n            updateNode(data);\n        }\n        updateLoading(false)\n\n    }\n    React.useEffect(() => {\n        //console.log('----------useEffect---------');\n        // if (currentSchema) {\n        //     if (typeof currentSchema === 'object' && currentSchema !== null) {\n        //         let validation = {};\n        //         Object.keys(currentSchema).forEach(e => {\n        //             try {\n        //                 initialize(\n        //                     currentSchema[e],\n        //                     (val) => {\n        //                         updateS(e)(val);\n        //                         updateResolvedSchema(prev => { return { [e]: val, ...prev } })\n        //                     },\n        //                     updateN(e));\n        //                 validation = { ...validation, ...getValidationSchema(currentSchema[e].data, '/' + e) }\n        //             }\n        //             catch (e) {\n        //                 console.log(e);\n        //                 toast.error('An error occured');\n        //                 history.goBack();\n\n        //             }\n        //         });\n        //         updateValidationSchema(Yup.object().shape(validation));\n        //         console.log(validationSchema, formik.validationSchema, validation)\n        //     }\n        // }\n       // axios.post(process.env.REACT_APP_API_URL + 'api/store/getone', {\n       if(action ==='update') {\n        axios.post(process.env.REACT_APP_API_URL + 'api/category/getone', {id:11})\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log('=======response.data.misfer========'+action, response.data);\n                    setCategoryData(response.data.data)\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n        }\n    }, []);\n    const removeFormFiles = (id) => {\n        //console.log('----------removeFormFiles---------');\n        for (const v of Object.values(inputsRef.current[id])) {\n            v && v.clearInputs();\n        }\n    }\n    const removeImages = (id) => {\n        //console.log('----------removeImages---------');\n        for (const v of Object.values(inputsRef.current[id])) {\n            v.clearImages();\n        }\n    }\n    const handleClick = (e) => {\n        //console.log('----------handleClick---------');\n        e.preventDefault();\n    };\n    const submitMultiple = async () => {\n        //console.log('----------submitMultiple---------',currentSchema);\n        let schemaStringKeys = getStringKeysFromSchema(currentSchema);\n        schemaStringKeys.forEach(e => { //console.log('----------submitMultiple---e------',e); \n            formik.setFieldTouched(e, true, false)\n        });\n        let errors = await formik.validateForm();\n        if (Object.keys(errors).length === 0) {\n            updateSubmitting(true);\n            const toastId = toast.loading('please wait...');\n            const notif = {\n                success: () => {\n                    toast.dismiss(toastId);\n                    if (action === 'push') toast.success('Added!');\n                    else if (action === 'update') toast.success('Updated!');\n                },\n                failed: () => {\n                    toast.dismiss(toastId);\n                    toast.error('Upload Failed');\n                }\n            }\n            let key = null, fail = false;\n            // if (action === 'push' && sameKey === true)\n            //     key = generatePushID();\n            for (const k of Object.keys(forms.current)) {\n                //console.log('----------submitMultiple---k------',k);\n                try {\n                    await submit(forms.current[k], currentSchema[k], nodeData && jsonToFormMap({ [k]: nodeData[k] }), key, toastId);\n                    removeFormFiles(k);\n                    if (action === 'update') {\n                        // DbGet(currentSchema[k].to).then((data) => {\n                        //     updateN(data);\n                        // });\n\n                    }\n                    else if (action === 'push') {\n                        removeImages(k);\n\n                    }\n                }\n                catch (e) {\n                    console.log(e)\n                    fail = true;\n                    notif.failed();\n                    history.goBack();\n                    break;\n                }\n\n            }\n            if (action === 'push') {\n                formik.setValues(Object.fromEntries(schemaStringKeys.map(e => [e, ''])));\n                //console.log('----------resolvedSchema---------',resolvedSchema);\n                updateCurrentSchema(resolvedSchema);\n            }\n            if (!fail) {\n                schemaStringKeys.forEach(e => formik.setFieldTouched(e, false, false));\n                notif.success();\n\n            }\n            updateSubmitting(false);\n\n        }\n\n    }\n    const submit = (form, schema, nodeDataStr = {}, key = null, toastId) => {\n        //console.log('----------submit-----form----',form);\n        //console.log('----------submit-----schema----',schema);\n        //console.log('----------submit-----nodeDataStr----',nodeDataStr);\n        return new Promise(async (resolve, reject) => {\n            let formdata = Object.fromEntries((new FormData(form)).entries());\n            formdata = resolveEmptyFiles(formdata, nodeDataStr);\n            //console.log('----------submit----2-----',copy(formdata));\n            let files = getFiles(formdata);\n            if (action === 'update') {\n                let imgRegexp = Object.keys(getElementsOfType(schema.data, \"image\")).map(e => {\n                    return `${e.replaceAll(/\\/\\$.*\\//g, \"\\/.+\\/\")}$`;\n                });\n                let oldImgs = Object.keys(nodeDataStr).filter((e) => {\n                    return imgRegexp.some(k => {\n                        let pattern = new RegExp(k);\n                        return !!e.match(pattern);\n                    })\n                })\n                let toDelete = arrayDifference(arrayDifference(oldImgs, Object.keys(files)), Object.keys(formdata)).map(e => {\n                    return nodeDataStr[e];\n                });\n                //console.log('----------submit-----3----',nodeDataStr);\n                //console.log('----------submit-----4----',oldImgs, Object.keys(files), Object.keys(formdata), arrayDifference(oldImgs, Object.keys(files)));\n                //console.log('----------submit-----5----',toDelete);\n                deleteImages(toDelete);\n            }\n\n\n            // console.log('----------submit---------',formdata);\n            // console.log('----------Object.keys(files).length---------',Object.keys(files).length);\n            // console.log('----------files---------',files);\n            /*if (Object.keys(files).length === 0) {\n                await submitData(formdata, action, schema.to, key,heading);\n                resolve(true);\n            }else {\n                uploadImages(files, schema.imgLocation).then(async (res) => {\n                    formdata = { ...formdata, ...res.uploaded };\n                    await submitData(formdata, action, schema.to, key,heading);\n                    if (action === 'update') {\n                        let currentData = nodeDataStr;\n                        if (currentData) {\n                            let updated = arrayIntersect(Object.keys(currentData), Object.keys(res.uploaded));\n                            let toBeRemoved = updated.map((e) => { return currentData[e]; });\n                            deleteImages(toBeRemoved);\n                        }\n\n                    }\n                    resolve(true);\n                }).catch(e => {\n                    reject(e);\n\n                });\n            }*/\n            console.log('----------Object.keys(files).length---------', Object.keys(files).length);\n            await submitData(formdata, action, schema.to, key, heading, toastId);\n        });\n\n    }\n    const loadMultipleImages = (e, keyProp, inputId, id, level) => {\n        //console.log('----------loadMultipleImages---------');\n        if (inputsRef.current.length == 0) {\n            return (<UImage title={e.displayName} ref={e => {\n                inputsRef.current[id] = inputsRef.current[id] ?? {};\n                inputsRef.current[id][keyProp] = e;\n            }}\n                name={inputId}\n                src={getObjectValueUsingString(nodeData ? nodeData[id] : null, `${level}/${e.key}`)}\n                defaultImage={img} />\n            )\n        }\n        else {\n            for (let i = 0; i < inputsRef.current.length; i++) {\n                return (\n                    <UImage title={e.displayName} ref={e => {\n                        inputsRef.current[i] = inputsRef.current[i] ?? {};\n                        inputsRef.current[i][keyProp] = e;\n                    }}\n                        name={inputId}\n                        src={getObjectValueUsingString(nodeData ? nodeData[id] : null, `${level}/${e.key}`)}\n                        defaultImage={img} />\n                )\n            }\n        }\n\n\n    }\n    const generateFeilds = (map, level = '', parent, sch = {}) => {\n        // console.log('----------map---------',map);\n        // console.log('----------level---------',level);\n        // console.log('----------parent---------',parent);\n        // console.log('----------sch---------',sch);\n        let { schema, updateSchema, id } = sch;\n\n        if (!map || !Array.isArray(map))\n            return;\n        const fieldElements = map.map((e, i) => {\n            let levelInt = level.match(/\\//);\n            levelInt = levelInt ? levelInt.length : 0;\n            let keyProp = `${levelInt}_${i}`, inputId = level === '' ? `/${id}/${e.key}` : `/${id}${level}/${e.key}`;\n            if (e.type == 'text')\n                return (\n                    <Grid key={keyProp} item xs={12} sm={6}>\n                        <TextField\n                            InputLabelProps={{ shrink: true }}\n                            id={inputId}\n                            name={inputId}\n                            label={e.displayName}\n                            fullWidth\n                            onChange={formik.handleChange}\n                            value={formik.values[inputId]}\n                            error={formik.touched[inputId] && !!formik.errors[inputId]}\n                            helperText={formik.touched[inputId] && formik.errors[inputId]}\n                            onBlur={() => formik.setFieldTouched(inputId, true)}\n                        /> .....\n                    </Grid>\n                )\n            else if (e.type == 'textarea')\n                return (\n                    <Grid key={keyProp} item xs={12} sm={6}>\n                        <TextField\n                            InputLabelProps={{ shrink: true }}\n                            id={inputId}\n                            name={inputId}\n                            label={e.displayName}\n                            multiline\n                            fullWidth\n                            rows={6}\n                            rowsMax={15} \n\n                        />\n                    </Grid>\n                )\n            else if (e.type == 'select')\n                return (\n                    <Grid key={keyProp} item xs={12} sm={6}>\n                        <InputLabel id=\"demo-simple-select-label\">{e.key}</InputLabel>\n                        <NativeSelect\n                            name={inputId}\n                            id={inputId}\n                            onChange={(e) => formik.setFieldValue(inputId, e.target.value)}\n                            onBlur={() => formik.setFieldTouched(inputId, true)}\n                            value={formik.values[inputId]}\n                            error={formik.touched[inputId] && !!formik.errors[inputId]}>\n                            <option aria-label=\"None\" value=\"Select\" />\n                            {\n                                Array.isArray(categoryData) && categoryData.map((m, i) => <option key={i} value={m.name}>{m.name}</option>)\n                            }\n                        </NativeSelect>\n                        <FormHelperText error>{formik.touched[inputId] && formik.errors[inputId]}</FormHelperText>\n                    </Grid>\n                )\n\n            else if (e.type == 'image')\n                return (\n                    <Grid key={keyProp} item xs={12} sm={6}>\n                        <UImage title={e.displayName} ref={e => { inputsRef.current[id] = inputsRef.current[id] ?? {}; inputsRef.current[id][keyProp] = e; }}\n                            name={inputId}\n                            src={getObjectValueUsingString(nodeData ? nodeData[id] : null, `${level}/${e.key}`)}\n                            defaultImage={img}\n                        />\n                        \n\n                    </Grid>\n                )\n            else if (e.type == 'json' && e.data) {\n\n                if (e.notSub)\n                    return (\n                        <Grid key={keyProp} item xs={12} sm={12}>\n                            <Grid container spacing={3} className={e.parent?.type === 'collection' ? classes.card : null}>\n                                {\n                                    e.parent?.type === 'collection' &&\n                                    <Fab color=\"primary\" aria-label=\"add\"\n                                        onClick={() => {\n                                            let s = copy(schema);\n                                            removeFromSchema(s, `${level}/${e.key}`);\n                                            updateSchema(s);\n                                        }\n\n                                        }>\n                                        <RemoveIcon />\n                                    </Fab>\n                                }\n                                <Grid item xs={12} sm={12}>\n                                    <Typography variant=\"h6\" className={classes.formSubHeading} >\n                                        {e.displayName}\n                                    </Typography>\n                                </Grid>\n                                {generateFeilds(e.data, `${level}/${e.key}`, e, sch)}\n                            </Grid>\n\n                        </Grid>\n                    )\n                else\n                    return (\n                        <Grid key={i} item xs={12} sm={6}>\n                            <Grid item xs={12} sm={12}>\n                                <Typography variant=\"h6\" gutterBottom>\n                                    {e.displayName}\n                                </Typography>\n                            </Grid>\n                            <Grid container spacing={3} >\n                                {generateFeilds(e.data, `${level}/${e.key}`, e, sch)}\n                            </Grid>\n                        </Grid>\n                    )\n            } else if (e.type == 'collection') {\n                return (\n                    <Grid key={keyProp} item xs={12} sm={12}>\n                        <Grid item xs={12} sm={12}>\n                            <Typography variant=\"h6\" gutterBottom>\n                                {e.displayName}\n                            </Typography>\n\n                        </Grid>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12} sm={12}>\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => {\n                                    let s = copy(schema);\n                                    addToSchema(s, `${level}/${e.key}`, collectionToJsonSchema(e, ['sdgfjsd']));\n                                    console.log(s);\n                                    updateSchema(s);\n                                }}>\n                                    +\n                                </Button>\n                            </Grid>\n\n                            {\n                                generateFeilds(e.data, `${level}/${e.key}`, e, sch)\n                            }\n\n                        </Grid>\n                    </Grid>\n                )\n            }\n        })\n        return fieldElements;\n    }\n    if (!schema || !action)\n        return <></>\n    return (\n        <>\n            {\n                currentSchema && (typeof currentSchema === 'object' && currentSchema !== null) &&\n                <React.Fragment >\n                    <ArrowBackIcon onClick={() => history.goBack()}></ArrowBackIcon>\n                    <Typography variant=\"h4\" gutterBottom>\n                        {heading}\n                    </Typography>\n\n                    <Backdrop className={classes.backdrop} open={loading} onClick={handleClick}>\n                        <CircularProgress color=\"inherit\" />\n                    </Backdrop>\n                    {Object.keys(currentSchema).map((e) => {\n                        ////console.log('----------e---------', e);\n                        return (\n                            <form\n                                className={classes.form}\n                                key={e}\n                                ref={k => forms.current[e] = k}\n                                encType=\"multipart/form-data\">\n                                <Grid container spacing={3}>\n                                    {generateFeilds(currentSchema[e]?.data, '', null, { schema: currentSchema[e], updateSchema: updateS(e), id: e })}\n                                </Grid>\n                            </form>\n                        )\n                    }\n\n                    )}\n                    <Grid container direction=\"row-reverse\"\n                    >\n                        <Button disabled={submitting} onClick={submitMultiple} variant=\"contained\" color=\"primary\" className={classes.submitArea}>\n                            Submit.....\n                        </Button>\n                    </Grid>\n                </React.Fragment>\n            }\n        </>\n    );\n}","import React from 'react';\nimport { Container } from '@material-ui/core/';\nimport Form from '../components/Form';\nimport schemaFactory from '../functions/schemaFactory'\n\nexport default function Ad() {\n\n    return (\n        <Container>\n            <Form heading='Ad Banner' schema={schemaFactory('ads')} name={'ad'} action='update' />\n        </Container>\n    )\n\n}","import React from 'react';\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Form from '../components/Form';\nimport schemaFactory from '../functions/schemaFactory'\n\nexport default function FormWrap() {\n    const location = useLocation();\n    let heading = location?.state.heading;\n    let action = location?.state.action;\n    let [schemaName, loc] = location?.state.schema\n    let schema = schemaFactory(schemaName, loc || '');\n    let sameKey = location?.state.sameKey\n    console.log(\"=================================================\"+heading);\n return <Form heading={heading} action={action} schema={schema} sameKey={true} />\n\n}","import { Upload, message } from 'antd';\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\nimport React,{ Component } from 'react';\nimport { Grid,Button } from '@material-ui/core';\nimport 'antd/dist/antd.css';\nimport axios from 'axios';\nfunction getBase64(img, callback) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJpgOrPng) {\n        message.error('You can only upload JPG/PNG file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n        message.error('Image must smaller than 2MB!');\n    }\n    return isJpgOrPng && isLt2M;\n}\n\nclass AntImageUpload extends Component {\n    state = {\n        loading: false,\n        delete:'Delete'\n    };\n    removeValue(list, value) {\n        return list.replace(new RegExp(\",?\" + value + \",?\"), function (match) {\n          var first_comma = match.charAt(0) === \",\",\n            second_comma;\n      \n          if (\n            first_comma &&\n            (second_comma = match.charAt(match.length - 1) === \",\")\n          ) {\n            return \",\";\n          }\n          return \"\";\n        });\n      }\n\nhandleDelete =(id) => {\n\n    axios.post(process.env.REACT_APP_API_URL + 'api/store/delete-img', {\n        id: id,\n        store_id: this.props.storeid\n      })\n      .then(function (response) {\n        console.log(response);\n\n        alert('Image is Deleted')\n        window.location.reload()\n\n        \n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n      \n//this.removeValue(this.props.value, id); // 2,3\n//alert(this.removeValue(this.props.value,id)); // 2,3   \n// if(this.props.multiple) {\n\n\n//         this.props.onChange(this.removeValue(this.props.value,id))\n//         this.setState({\n//             delete: 'Click Submit Button to Confirm Delete'\n//         })\n//     } else {\n// //this.props.onChange(file.response.imageId)\n//     }\n     }\n\n\n     componentDidMount() {\n\n     }\n\n   \n\n    handleChange = info => {\n        if (info.file.status === 'uploading') {\n            this.setState({ loading: true });\n            return;\n        }\n        if (info.file.status === 'done') {\n            console.log('info...', info.file.response.imageId);\n            if (this.props.multiple) {\n                let value = this.props.value;\n                this.props.onChange(value === \"\" ? info.file.response.imageId : value + \",\"+info.file.response.imageId)\n            }else{\n                //alert(info.file.response.imageId)\n               this.props.onChange(info.file.response.imageId)\n//this.props.handleInputServiceChange(info.file.response.imageId)\n            }\n            \n            // Get this url from response in real world.\n            getBase64(info.file.originFileObj, imageUrl =>\n                this.setState({\n                    imageUrl,\n                    loading: false,\n                }),\n            );\n        }\n    };\n\n\n    fetchEvent =() => {\n        const filteredUsers = this.props.banners.filter((user) => {\n            return [this.props.value].includes(user)\n          });\n\n      console.log('Data is'+ filteredUsers)\n    }\n\n \n    render() {\n        const { loading, imageUrl } = this.state;\n        const uploadButton = (\n            <div>\n                {loading ? <LoadingOutlined /> : <PlusOutlined />}\n                <div style={{ marginTop: 8 }}>Upload</div>\n            </div>\n        );\n        return (\n            <>\n                <Grid container spacing={3}>\n                    <Grid item xs={4}>\n                        {this.props.title}\n                        \n                        <Upload\n                            name=\"image\"\n                            listType=\"picture-card\"\n                            className=\"avatar-uploader\"\n                            showUploadList={this.props.multiple}\n                            multiple={this.props.multiple}\n                            action={process.env.REACT_APP_API_URL + 'api/store/upload'}\n                            beforeUpload={beforeUpload}\n                            onChange={this.handleChange}\n                        >\n                            {console.log('this.props.multiple', this.props.multiple)}\n                            {this.props.multiple ?\n                                <>\n            \n\n                                    {uploadButton}\n\n                                </>\n                                 \n                                :\n                                <>\n                                \n                                    {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n                                </>\n                            }\n\n\n\n\n                            \n\n                        </Upload>\n                    </Grid>\n                    <Grid item xs={4}>\n                        {/* <input\n                            ref={inputRef}\n                            hidden\n                            accept=\"image/*\"\n                            type=\"file\"\n                            onChange={selectFile}\n                            multiple\n                            name={name || \"\"}\n                        />\n                        {\n                            loading ? <Skeleton variant=\"rect\" width={210} height={118} animation=\"wave\" />\n                                :\n                                imgState.map((mapData) => {\n                                    //console.log('------mapData----', mapData)\n                                    return (\n                                        <img src={mapData.previewImage}\n                                            alt={name}\n                                            onError={() => setImgState([{\n                                                currentFile: null,\n                                                previewImage: defaultImage,\n                                            }])}\n                                            className='formImg'\n                                            onClick={clickInput}></img>\n                                    )\n                                })\n\n                        } */}\n\n\n\n                         {/* <img \n                         \n        src={process.env.REACT_APP_API_URL + 'static/Images/Category/'+rhi} />\n */}\n\n   \n                    \n                    </Grid>\n\n                    <Grid item xs={4}>\n                        {/* {this.props.banners} */}\n                       \n\n\n                        {\n                            this.props.multiple ===false && this.props.value && this.props.single === true? \n                            <>\n                        \n                            \n                            <img width={150} src={process.env.REACT_APP_API_URL + \"static/Images/Store/\" +this.props.image}/>\n                            </>\n                            :\n                            <>\n\n                            </>\n                        }\n\n\n                        {/* {\n                           this.props.services?.map((service,key) => (\n                               <>\n     <Grid item xs={3} key={key}>\n    \n     \n    \n    <img width={150} src={process.env.REACT_APP_API_URL + \"static/Images/Store/\" +service.image.filename} />\n    </Grid>\n\n                               </>\n                           ))\n                        } */}\n\n                         \n                    </Grid>\n\n\n                    \n                    {this.props.banners === null? <> \n            \n\n            </>\n            :\n            <>\n                        {this.props.banners?.map((product,key) => (\n    \n                            \n    \n    <Grid item xs={3} key={key}>\n    \n     \n    \n     <img width={150} src={process.env.REACT_APP_API_URL + \"static/Images/Store/\" +product.filename} />\n    <Button variant=\"outlined\" color=\"error\" onClick={e=> this.handleDelete(product.id)}>Delete</Button>  \n    </Grid>\n    ))};\n            </>\n                            }\n\n                </Grid>\n            </>\n\n        );\n    }\n}\n\nexport default AntImageUpload;","import { Backdrop, Button, CircularProgress, FormHelperText, Grid, InputLabel, NativeSelect, TextField, Typography } from \"@material-ui/core\";\nimport { Controller, useForm, useFieldArray } from \"react-hook-form\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport AntImageUpload from \"./AntImageUpload\";\nimport toast from \"react-hot-toast\";\nimport { Select } from \"antd\";\n\nconst StoreAdd = () => {\n    const history = useHistory();\n    const [categoryData, setCategoryData] = useState([]);\n    const [count, setCount] = useState(0);\n    const { register, handleSubmit, watch, control, formState: { errors } } = useForm();\n\n    useEffect(() => {\n\n\n        axios({ method: 'GET', url: process.env.REACT_APP_API_URL + 'api/category/getall' })\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log('=======response.data========', response.data);\n                    setCategoryData(response.data.data)\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n    }, []);\n\n    const handleStoreAdd = (data) => {\n\n        alert(data);\n        console.log('dddd ', data);\n        axios({ method: 'POST', url: process.env.REACT_APP_API_URL + 'api/store/create', data })\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log(response.data);\n                    // toast.dismiss(toastId);\n                    toast.success('Added!');\n                    window.location.reload(false);\n                } else {\n                    // toast.dismiss(toastId);\n                    toast.error('Something went wrong');\n                }\n            }).catch(function (error) {\n                console.log(error);\n                // toast.dismiss(toastId);\n                // toast.error('Upload Failed');\n            });\n    }\n\n    let { fields, append, remove } = useFieldArray({\n        control,\n        name: \"services\",\n    });\n\n    return <>\n\n        <ArrowBackIcon onClick={() => history.goBack()}></ArrowBackIcon>\n        <Typography variant=\"h4\" gutterBottom>\n            Add Store\n        </Typography>\n\n        {/* <Backdrop className={classes.backdrop} open={loading} onClick={handleClick}>\n            <CircularProgress color=\"inherit\" />\n        </Backdrop> */}\n        <form\n            // className={classes.form}\n            onSubmit={handleSubmit(handleStoreAdd)}\n            encType=\"multipart/form-data\">\n\n            <Grid container spacing={3}>\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"name\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Name\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"location\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Location\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"category\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <InputLabel id=\"demo-simple-select-label\">Category</InputLabel>\n                                <NativeSelect\n                                    // name={inputId}\n                                    id=\"category\"\n                                    onChange={onChange}\n                                    onBlur={onBlur}\n                                    value={value}\n                                // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                >\n                                    <option aria-label=\"None\" value=\"Select\" />\n                                    {\n                                        Array.isArray(categoryData) && categoryData.map((m, i) => <option key={i} value={m.id}>{m.name}</option>)\n                                    }\n                                </NativeSelect>\n                                {/* <FormHelperText error>{formik.touched[inputId] && formik.errors[inputId]}</FormHelperText> */}\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                \n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"description\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        InputLabelProps={{ shrink: true }}\n                                        label={\"Description\"}\n                                        multiline\n                                        fullWidth\n                                        rows={6}\n                                        rowsMax={15}\n                                        onChange={onChange}\n                                        value={value}\n                                        // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                        // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                        onBlur={onBlur}\n\n                                    />\n                                </Grid>\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"offer\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <InputLabel id=\"demo-simple-select-label\">Offer</InputLabel>\n                                <NativeSelect\n                                    // name={inputId}\n                                    id=\"offer\"\n                                    onChange={onChange}\n                                    onBlur={onBlur}\n                                    value={value}\n                                // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                >\n                                    <option aria-label=\"None\" value=\"\" />\n                                    <option value={\"Get 20% discount on total bill amount\"}>Get 20% discount on total bill amount</option>\n                                    <option value={\"Get 25% discount on total bill amount\"}>Get 25% discount on total bill amount</option>\n                                    <option value={\"Get 30% discount on total bill amount\"}>Get 30% discount on total bill amount</option>\n                                    <option value={\"Complimentary desert\"}>Complimentary desert</option>\n                                    <option value={\"Buy one Get one free on main courses\"}>Buy one Get one free on main courses</option>\n                                    <option value={\"Buy one Get one free on selected services\"}>Buy one Get one free on selected services</option>\n                                    \n                                </NativeSelect>\n                                {/* <FormHelperText error>{formik.touched[inputId] && formik.errors[inputId]}</FormHelperText> */}\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"phone\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Phone\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"stars\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Stars\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={12}>\n                    <Typography variant=\"h5\" >\n                        Coordinates\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"latitude\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Latitude\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"longitude\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Longitude\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={12}>\n                    <Typography variant=\"h5\" >\n                        Links\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"instagram\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Instagram\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"website\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Website\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"image\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <AntImageUpload title=\"Image\" multiple={false} onChange={onChange} value={value} />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"banner\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n                                <AntImageUpload title=\"Banner Image\" multiple={true} onChange={onChange} value={value} />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid container spacing={3}>\n                    <Grid item xs={12} sm={12}>\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => {\n\n                            append({ name: \"\", charge: \"\", image: \"\" })\n                        }}>\n                            +\n\n                        </Button>\n                    </Grid>\n\n                    {fields.map((x, i) => {\n                        return <>\n                            <Grid item xs={12} sm={6} key={x.id}>\n                                <Controller\n                                    control={control}\n                                    name={`services.${i}.name`}\n                                    // defaultValue=\"\"\n                                    render={({ field: { onChange, onBlur, value, ref } }) => (\n                                        <>\n\n                                            <TextField\n                                                InputLabelProps={{ shrink: true }}\n                                                // id=\"name\"\n                                                // name=\"name\"\n                                                label=\"Name\"\n                                                fullWidth\n                                                onChange={onChange}\n                                                value={value}\n                                                // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                                // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                                onBlur={onBlur}\n                                            />\n                                        </>\n\n                                    )}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <Controller\n                                    control={control}\n                                    name={`services.${i}.charge`}\n                                    // defaultValue=\"\"\n                                    render={({ field: { onChange, onBlur, value, ref } }) => (\n                                        <>\n\n                                            <TextField\n                                                InputLabelProps={{ shrink: true }}\n                                                // id=\"name\"\n                                                // name=\"name\"\n                                                label=\"Charge\"\n                                                fullWidth\n                                                onChange={onChange}\n                                                value={value}\n                                                // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                                // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                                onBlur={onBlur}\n                                            />\n                                        </>\n\n                                    )}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <Controller\n                                    control={control}\n                                    name={`services.${i}.image`}\n                                    // defaultValue=\"\"\n                                    render={({ field: { onChange, onBlur, value, ref } }) => (\n                                        <>\n                                            <AntImageUpload title=\"image\" multiple={false} onChange={onChange} value={value} />\n                                        </>\n\n                                    )}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}></Grid>\n                        </>\n                    })}\n\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"keywords\"\n                        defaultValue={[]}\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n                                {console.log('vvv ',value)}\n                                {/* <AntImageUpload title=\"Banner Image\" multiple={true} onChange={onChange} value={value} /> */}\n                                <Select\n                                    mode=\"tags\"\n                                    size=\"middle\"\n                                    placeholder=\"Enter Keywords\"\n                                    // defaultValue={['a10', 'c12']}\n                                    value={value == \"\" ? []: value }\n                                    onChange={onChange}\n                                    style={{ width: '100%' }}\n                                >\n                                </Select>\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n            </Grid>\n            <Grid container direction=\"row-reverse\">\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" >\n                    Submit\n                </Button>\n            </Grid>\n        </form>\n\n    </>;\n}\n\nexport default StoreAdd;","import { Backdrop, Button, CircularProgress, FormHelperText, Grid, InputLabel, NativeSelect, TextField, Typography } from \"@material-ui/core\";\nimport { Controller, useForm, useFieldArray } from \"react-hook-form\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { useLocation, useHistory, useParams } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport AntImageUpload from \"./AntImageUpload\";\nimport toast from \"react-hot-toast\";\nimport { Alert, Select } from \"antd\";\n\nconst StoreEdit = () => {\n    const history = useHistory();\n    const [categoryData, setCategoryData] = useState([]);\n    const [banners,setBanners] = useState([]);\n    const [count, setCount] = useState(0);\n    const [banner,setBanner] = useState();\n    const [store,setStore] =useState();\n    const [image,setImage] = useState();\n    const [service,setService] = useState([])\n    const [updateService,setUpdateService] = useState([{id:'',name:'',charge:'', image: {\n        filename: \"\",\n        destination: \"\"\n      }}]);\n    const { register, handleSubmit, watch, control, setValue, formState: { errors } } = useForm();\n    const params = useParams();\n\n    console.log('useParams', params.id);\n\n    useEffect(() => {\n\n\n        axios({ method: 'GET', url: process.env.REACT_APP_API_URL + 'api/category/getall' })\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log('=======response.data========', response.data);\n                    setCategoryData(response.data.data)\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n        axios.post(process.env.REACT_APP_API_URL + 'api/store/getone', {\n            id: params.id\n        })\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log('=======response.data========', response.data);\n                    // setCategoryData(response.data.data)\n                    setValue(\"name\", response.data.data[0].name)\n                    setValue(\"location\", response.data.data[0].location)\n                    setValue(\"category\", response.data.data[0].category)\n                    setValue(\"description\", response.data.data[0].desciption)\n                    setValue(\"phone\", response.data.data[0].phone)\n                    setValue(\"stars\", response.data.data[0].stars)\n                    setValue(\"latitude\", response.data.data[0].latitude)\n                    setValue(\"longitude\", response.data.data[0].longitude)\n                    setValue(\"instagram\", response.data.data[0].instagram)\n                    setValue(\"website\", response.data.data[0].dribbble)\n                    setValue(\"offer\", response.data.data[0].offer)\n                    setValue('image',response.data.data[0].image)\n\n                    setImage(response.data.data[0].filename)\n                    //setValue('banners',)\n                          setValue('banner',response.data.data[0].bannerimg)\n\n                    setBanners(response.data.data[0].bannerImages)\n\n                    console.log('banners'+ JSON.stringify(response.data.data[0].bannerImages))\n                    setValue(\"images\", [process.env.REACT_APP_API_URL + \"static/Images/Store/\" + response.data.data[0].filename])\n                    setValue(\"keywords\", response.data.data[0].keywords.split(\",\"))\n                 setValue(\"services\", response.data.data[0].services);\n\n                 setUpdateService(response.data.data[0].services)\n                    setService(response.data.data[0].services)\n                    setValue(\"id\",params.id);\n\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n            //window.reload();\n    }, []);\n\n    const handleInputServiceChange = index => e => {\n        ///const { name, value } = event.target;\n      //  alert(name + value)\n       // setTutorial({ ...tutorial, [name]: value });\n       let newArr = [...updateService]; // copying the old datas array\n       newArr[index] = e.target.value; // replace e.target.value with whatever you want to change it to\n     \n       setUpdateService(newArr);\n      //  alert(JSON.stringify(newArr));\n       \n      };\n\n      const saveService =(id) => {\n\n        alert(JSON.stringify(id))\n\n      }\n    \n\n      const handleDelete =(id) => {\n          //alert(id);\n          console.log('iiiii ',id);\n        axios.post(process.env.REACT_APP_API_URL + 'api/store/delete-service', {id})\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log('=======response.data========', response.data);\n                    // update(response.data.data)\n                    toast.success('Deleted!');\n                    window.location.reload(false);\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n      }\n\n    const handleStoreEdit = (data) => {\n\n\n       // let newdata = data.push({banner:\"name\"});\n\n     // const obj = {'banner':'123'};\n\n    //  const obj = {'banner':'newItemInput'};\n    //  const newArray = data.slice(); // Create a copy\n    //  newArray.push(obj); \n    // data.push({'banner':'newItemInput'});\n\n    //data.banner = setValue('banner');\n    \n\n//alert(setValue('banner')\n\n//alert(JSON.stringify(data))\n\n       console.log('dddd ', JSON.stringify(data));\n        axios({ method: 'POST', url: process.env.REACT_APP_API_URL + 'api/store/update', data })\n            .then(function (response) {\n                if (response.status == 200) {\n                    console.log(response.data);\n                    // toast.dismiss(toastId);\n                    toast.success('Updaated');\n                  //  window.location.reload(false);\n                } else {\n                    // toast.dismiss(toastId);\n                    // toast.error('Upload Failed');\n                }\n            }).catch(function (error) {\n                console.log(error);\n                // toast.dismiss(toastId);\n                // toast.error('Upload Failed');\n            });\n    }\n\n    let { fields, append, remove,replace,update } = useFieldArray({\n        control,\n        name: \"services\",\n    });\n\n    return <>\n\n        <ArrowBackIcon onClick={() => history.goBack()}></ArrowBackIcon>\n        <Typography variant=\"h4\" gutterBottom>\n            Edit Store\n        </Typography>\n\n        {/* <Backdrop className={classes.backdrop} open={loading} onClick={handleClick}>\n            <CircularProgress color=\"inherit\" />\n        </Backdrop> */}\n        <form\n            // className={classes.form}\n            onSubmit={handleSubmit(handleStoreEdit)}\n            encType=\"multipart/form-data\">\n\n            <Grid container spacing={3}>\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"name\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Name\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"location\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Location\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"category\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <InputLabel id=\"demo-simple-select-label\">Category</InputLabel>\n                                <NativeSelect\n                                    // name={inputId}\n                                    id=\"category\"\n                                    onChange={onChange}\n                                    onBlur={onBlur}\n                                    value={value}\n                                // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                >\n                                    <option aria-label=\"None\" value=\"Select\" />\n                                    {\n                                        Array.isArray(categoryData) && categoryData.map((m, i) => <option key={i} value={m.id}>{m.name}</option>)\n                                    }\n                                </NativeSelect>\n                                {/* <FormHelperText error>{formik.touched[inputId] && formik.errors[inputId]}</FormHelperText> */}\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"description\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        InputLabelProps={{ shrink: true }}\n                                        label={\"Description\"}\n                                        multiline\n                                        fullWidth\n                                        rows={6}\n                                        rowsMax={15}\n                                        onChange={onChange}\n                                        value={value}\n                                        // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                        // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                        onBlur={onBlur}\n\n                                    />\n                                </Grid>\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"offer\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <InputLabel id=\"demo-simple-select-label\">Offer</InputLabel>\n                                <NativeSelect\n                                    // name={inputId}\n                                    id=\"offer\"\n                                    onChange={onChange}\n                                    onBlur={onBlur}\n                                    value={value}\n                                // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                >\n                                    <option aria-label=\"None\" value=\"\" />\n                                    <option value={\"Get 20% discount on total bill amount\"}>Get 20% discount on total bill amount</option>\n                                    <option value={\"Get 25% discount on total bill amount\"}>Get 25% discount on total bill amount</option>\n                                    <option value={\"Get 30% discount on total bill amount\"}>Get 30% discount on total bill amount</option>\n                                    <option value={\"Complimentary desert\"}>Complimentary desert</option>\n                                <option value={\"Buy one Get one free on main courses\"}>Buy one Get one free on main courses</option>\n                                    <option value={\"Buy one Get one free on selected services\"}>Buy one Get one free on selected services</option>\n\n                                </NativeSelect>\n                                {/* <FormHelperText error>{formik.touched[inputId] && formik.errors[inputId]}</FormHelperText> */}\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"phone\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Phone\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"stars\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Stars\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={12}>\n                    <Typography variant=\"h5\" >\n                        Coordinates\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"latitude\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Latitude\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"longitude\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Longitude\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={12}>\n                    <Typography variant=\"h5\" >\n                        Links\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"instagram\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Instagram\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"website\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <TextField\n                                    InputLabelProps={{ shrink: true }}\n                                    // id=\"name\"\n                                    // name=\"name\"\n                                    label=\"Website\"\n                                    fullWidth\n                                    onChange={onChange}\n                                    value={value}\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                    onBlur={onBlur}\n                                />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    {/* {id} */}\n                    <Controller\n                        control={control}\n                        name=\"image\"\n                       // value={store_image}\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n\n                                <AntImageUpload title=\"Image\" single={true} image={image} multiple={false} onChange={onChange} value={value} />\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"banner\"\n                        defaultValue=\"\"\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n                                <AntImageUpload banners={banners} storeid={params.id} title=\"Banner Image\" multiple={true} onChange={onChange} value={value} />\n                            </>\n\n                        )}\n                    />\n\n\n                </Grid>\n           \n\n                <Grid container spacing={3}>\n                    <Grid item xs={12} sm={12}>\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => {\n\n                            append({ name: \"\", charge: \"\", image: \"\" })\n                        }}>\n                            +\n\n                        </Button>\n                    </Grid>\n \n\n                    {fields.map((x, i) => {\n                        return <>\n                            <Grid item xs={12} sm={5} key={x.id}>\n                                <Controller\n                                    control={control}\n                                    name={`services.${i}.name`}\n                                    // defaultValue=\"\"\n                                    render={({ field: { onChange, onBlur, value, ref } }) => (\n                                        <>\n\n                                            <TextField\n                                                InputLabelProps={{ shrink: true }}\n                                                // id=\"name\"\n                                                // name=\"name\"\n                                                label=\"Name\"\n                                                fullWidth\n                                                onChange={onChange}\n                                                value={value}\n                                                // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                                // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                                onBlur={onBlur}\n                                            />\n                                        </>\n\n                                    )}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={2}>\n                                <Controller\n                                    control={control}\n                                    name={`services.${i}.charge`}\n                                    // defaultValue=\"\"\n                                    render={({ field: { onChange, onBlur, value, ref } }) => (\n                                        <>\n\n                                            <TextField\n                                                InputLabelProps={{ shrink: true }}\n                                                // id=\"name\"\n                                                // name=\"name\"\n                                                label=\"Charge\"\n                                                fullWidth\n                                                onChange={onChange}\n                                                value={value}\n                                                // error={formik.touched[inputId] && !!formik.errors[inputId]}\n                                                // helperText={formik.touched[inputId] && formik.errors[inputId]}\n                                                onBlur={onBlur}\n                                            />\n                                        </>\n\n                                    )}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                            \n                                <Controller\n                                    control={control}\n                                    name={`services.${i}.image`}\n                                    // defaultValue=\"\"\n                                    render={({ field: { onChange, onBlur, value, ref } }) => (\n                                        <>\n\n                                        \n                                         \n                                            <AntImageUpload title=\"image\" single={true} image={x.image.filename}  multiple={false} onChange={onChange} value={value} />\n                                          \n                                            </>\n\n                                    )}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n\n                                 <Button color=\"danger\" variant=\"contained\" onClick={e => handleDelete(x.newid)}>Delete</Button>\n \n                            </Grid>\n                        </>\n                    })}\n\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Controller\n                        control={control}\n                        name=\"keywords\"\n                        defaultValue={[]}\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <>\n                                {console.log('vvv ', value)}\n                                {/* <AntImageUpload title=\"Banner Image\" multiple={true} onChange={onChange} value={value} /> */}\n                                <Select\n                                    mode=\"tags\"\n                                    size=\"middle\"\n                                    placeholder=\"Enter Keywords\"\n                                    // defaultValue={['a10', 'c12']}\n                                    value={value == \"\" ? [] : value}\n                                    onChange={onChange}\n                                    style={{ width: '100%' }}\n                                >\n                                </Select>\n                            </>\n\n                        )}\n                    />\n                </Grid>\n\n            </Grid>\n            <Grid container direction=\"row-reverse\">\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" >\n                    Submit\n                </Button>\n            </Grid>\n        </form>\n\n    </>;\n}\n\nexport default StoreEdit;","import { Upload, message } from 'antd';\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { Component } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport 'antd/dist/antd.css';\r\n\r\nfunction getBase64(img, callback) {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result));\r\n    reader.readAsDataURL(img);\r\n}\r\n\r\nfunction beforeUpload(file) {\r\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n    if (!isJpgOrPng) {\r\n        message.error('You can only upload JPG/PNG file!');\r\n    }\r\n    const isLt2M = file.size / 1024 / 1024 < 2;\r\n    if (!isLt2M) {\r\n        message.error('Image must smaller than 2MB!');\r\n    }\r\n    return isJpgOrPng && isLt2M;\r\n}\r\n\r\nclass CatImage extends Component {\r\n    state = {\r\n        loading: false,\r\n    };\r\n\r\n    handleChange = info => {\r\n        if (info.file.status === 'uploading') {\r\n            this.setState({ loading: true });\r\n            return;\r\n        }\r\n        if (info.file.status === 'done') {\r\n            console.log('info', info.file.response.imageId);\r\n            if (this.props.multiple) {\r\n                let value = this.props.value;\r\n                this.props.onChange(value === \"\" ? info.file.response.imageId : value + \",\"+info.file.response.imageId)\r\n            }else{\r\n                this.props.onChange(info.file.response.imageId)\r\n            }\r\n            \r\n            // Get this url from response in real world.\r\n            getBase64(info.file.originFileObj, imageUrl =>\r\n                this.setState({\r\n                    imageUrl,\r\n                    loading: false,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { loading, imageUrl } = this.state;\r\n        const uploadButton = (\r\n            <div>\r\n                {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n                <div style={{ marginTop: 8 }}>Upload</div>\r\n            </div>\r\n        );\r\n        return (\r\n            <>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        {this.props.title}\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        {/* <input\r\n                            ref={inputRef}\r\n                            hidden\r\n                            accept=\"image/*\"\r\n                            type=\"file\"\r\n                            onChange={selectFile}\r\n                            multiple\r\n                            name={name || \"\"}\r\n                        />\r\n                        {\r\n                            loading ? <Skeleton variant=\"rect\" width={210} height={118} animation=\"wave\" />\r\n                                :\r\n                                imgState.map((mapData) => {\r\n                                    //console.log('------mapData----', mapData)\r\n                                    return (\r\n                                        <img src={mapData.previewImage}\r\n                                            alt={name}\r\n                                            onError={() => setImgState([{\r\n                                                currentFile: null,\r\n                                                previewImage: defaultImage,\r\n                                            }])}\r\n                                            className='formImg'\r\n                                            onClick={clickInput}></img>\r\n                                    )\r\n                                })\r\n\r\n                        } */}\r\n\r\n\r\n\r\n                         {/* <img \r\n                         \r\n        src={process.env.REACT_APP_API_URL + 'static/Images/Category/'+rhi} />\r\n */}\r\n\r\n\r\n                        <Upload\r\n                            name=\"image\"\r\n                            listType=\"picture-card\"\r\n                            className=\"avatar-uploader\"\r\n                            showUploadList={this.props.multiple}\r\n                            multiple={this.props.multiple}\r\n                            action={process.env.REACT_APP_API_URL + 'api/category/upload'}\r\n                            beforeUpload={beforeUpload}\r\n                            onChange={this.handleChange}\r\n                            value={this.props.value}\r\n                        >\r\n                            {console.log('this.props.multiple', this.props.multiple)}\r\n                            {this.props.multiple ?\r\n                                <>\r\n                                    {uploadButton}\r\n\r\n                                </>\r\n                                 \r\n                                :\r\n                                <>\r\n                                    {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n                                </>\r\n                            }\r\n\r\n\r\n\r\n\r\n                            \r\n\r\n                        </Upload>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        {\r\n                            this.props.value ? \r\n                            <>\r\n                            <img width={150} src={process.env.REACT_APP_API_URL + 'static/Images/Category/'+this.props.value} />\r\n                            </>\r\n                            :\r\n                            <>\r\n\r\n                            </>\r\n                        }\r\n\r\n                         \r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CatImage;","\r\nimport { Backdrop, Button, CircularProgress, FormHelperText, Grid, InputLabel, NativeSelect, TextField, Typography } from \"@material-ui/core\";\r\nimport { Controller, useForm, useFieldArray } from \"react-hook-form\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { useLocation, useHistory, useParams } from \"react-router-dom\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport CatImage from \"./CatImage\";\r\nimport toast from \"react-hot-toast\";\r\nimport { Select } from \"antd\";\r\nimport UImage from './ImageUpload';\r\nimport img from '../Placeholder.jpg';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { Upload, message } from 'antd';\r\n\r\nexport default function EditCategory() {\r\n  const history = useHistory();\r\n    const [categoryData, setCategoryData] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n    const { register, handleSubmit, watch, control, setValue, formState: { errors } } = useForm();\r\n    const params = useParams();\r\n    const [nodeData, updateNodeData] = React.useState(null);\r\n    const inputsRef = React.useRef({});\r\n    const [loading, setLoading] = React.useState(true);\r\n\r\n    React.useEffect(() => {\r\n      \r\n     \r\n      axios.post(process.env.REACT_APP_API_URL + 'api/category/getone', {id:params.id})\r\n          .then(function (response) {\r\n              if (response.status == 200) {\r\n                  console.log('=======response.data.misfer========', response.data);\r\n                  setValue(\"name\", response.data.data[0].name)\r\n                  setValue(\"label\", response.data.data[0].label)\r\n                  setValue(\"id\",params.id);\r\n                  axios.post(process.env.REACT_APP_API_URL + 'api/banner/getone',{id:response.data.data[0].image_id})\r\n                      .then(function (responseImg) {\r\n                        if(responseImg.status == 200) {\r\n                          console.log('=======response.data.image========', responseImg.data);\r\n                          setValue(\"image\", responseImg.data.data[0].filename)\r\n\r\n                        }\r\n                      }).catch(function (error) {\r\n                        console.log(error)\r\n                      });\r\n\r\n                      \r\n               }\r\n          }).catch(function (error) {\r\n              console.log(error);\r\n          });\r\n\r\n\r\n          \r\n      \r\n  }, []);\r\n\r\n\r\n  const handleStoreEdit = (data) => {\r\n\r\n\r\n    console.log('new data ', data);\r\n    \r\n    axios({ method: 'POST', url: process.env.REACT_APP_API_URL + 'api/category/update', data })\r\n        .then(function (response) {\r\n            if (response.status == 200) {\r\n                console.log(response.data);\r\n                // toast.dismiss(toastId);\r\n                toast.success('Successfully Updated!');\r\n              //  window.location.reload(false);\r\n            } else {\r\n                // toast.dismiss(toastId);\r\n                // toast.error('Upload Failed');\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n            // toast.dismiss(toastId);\r\n            // toast.error('Upload Failed');\r\n        });\r\n}\r\n  return (\r\n    <>\r\n          <ArrowBackIcon ></ArrowBackIcon>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            Edit Category \r\n        </Typography>\r\n\r\n        \r\n        <form\r\n            onSubmit={handleSubmit(handleStoreEdit)}\r\n            // className={classes.form}\r\n             encType=\"multipart/form-data\">\r\n\r\n            <Grid container spacing={4}>\r\n            <Grid item xs={12} sm={6}>\r\n                    <Controller\r\n                        control={control}\r\n                        name=\"name\"\r\n                        defaultValue=\"\"\r\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\r\n                            <>\r\n\r\n                                <TextField\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    // id=\"name\"\r\n                                    // name=\"name\"\r\n                                    label=\"Name\"\r\n                                    fullWidth\r\n                                    onChange={onChange}\r\n                                    value={value}\r\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\r\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\r\n                                    onBlur={onBlur}\r\n                                />\r\n                            </>\r\n\r\n                        )}\r\n                    />\r\n                \r\n                </Grid>\r\n\r\n \r\n\r\n                <Grid item xs={12} sm={6}>\r\n                    <Controller\r\n                        control={control}\r\n                        name=\"label\"\r\n                        defaultValue=\"\"\r\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\r\n                            <>\r\n\r\n                                <TextField\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    // id=\"name\"\r\n                                    // name=\"name\"\r\n                                    label=\"Label\"\r\n                                    fullWidth\r\n                                    onChange={onChange}\r\n                                    value={value}\r\n                                    // error={formik.touched[inputId] && !!formik.errors[inputId]}\r\n                                    // helperText={formik.touched[inputId] && formik.errors[inputId]}\r\n                                    onBlur={onBlur}\r\n                                />\r\n                            </>\r\n\r\n                        )}\r\n                    />\r\n                \r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6}>\r\n                    <Controller\r\n                        control={control}\r\n                        name=\"image\"\r\n                        defaultValue=\"\"\r\n                        render={({ field: { onChange, onBlur, value, ref } }) => (\r\n                            <>\r\n\r\n\r\n            \r\n                                <CatImage title=\"Image\" multiple={false} onChange={onChange} value={value} />\r\n                            </>\r\n\r\n                        )}\r\n                    />\r\n\r\n            \r\n\r\n                    \r\n                </Grid>\r\n\r\n\r\n                    </Grid>\r\n\r\n                    <Grid container direction=\"row-reverse\">\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" >\r\n                    Submit\r\n                </Button>\r\n            </Grid>\r\n                    </form>\r\n\r\n    </>\r\n  )\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route,withRouter } from 'react-router-dom';\n\n\nimport clsx from 'clsx';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Container from '@material-ui/core/Container';\n\n\nimport AppBar from '../components/AppBar'\nimport Drawer from '../components/Drawer'\nimport { useStyles } from '../components/styles'\nimport Stores from './Stores';\n\nimport ViewStoreDetails from './ViewStoreDetails';\nimport Categories from './Categories';\nimport AdBanner from './AdBanner';\nimport Form from '../components/Form';\nimport FormWrap from '../components/formWrap';\nimport StoreAdd from '../components/StoreAdd'\nimport StoreEdit from '../components/StoreEdit';\nimport EditCategory from '../components/EditCategory';\nimport { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\n\n\nfunction Dashboard() {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n    return (\n\n        <>\n            <Router>  \n\n            <div className={classes.root}>\n                <CssBaseline />\n                <AppBar classes={classes} drawer={handleDrawerOpen} open={open} />\n                <Drawer classes={classes} drawer={handleDrawerClose} open={open} />\n                <main className={classes.content}>\n                    <div className={classes.appBarSpacer} />\n                    <Container maxWidth=\"lg\" className={classes.container}>\n\n                        <Switch>\n\n                            <Route path=\"/ads\">\n                                <AdBanner />\n                            </Route>\n\n                            <Route path=\"/categories\">\n                                <Categories />\n                            </Route>\n\n                            <Route path=\"/view\">\n                                <ViewStoreDetails />\n                            </Route>\n                            <Route path='/store/add'>\n                                <StoreAdd />\n                            </Route>\n                            <Route path='/store/edit/:id'>\n                                <StoreEdit />\n                            </Route>\n                            <Route path='/form'>\n                                <FormWrap />\n                            </Route>\n\n                            <Route path='/categories-edit/:id' >\n                            <EditCategory />\n\n                                </Route>\n\n \n \n\n                            <Route path=\"/\">\n                                <Stores />\n                            </Route>\n                        </Switch>\n\n                    </Container>\n\n                </main>\n            </div>\n            </Router>\n        </>\n    );\n}\n\nexport default Dashboard;","import React, { useState } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport { CButton, CCard, CCardBody, CCardGroup, CCol, CContainer, CForm, CFormInput, CInputGroup, CInputGroupText, CRow, } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nconst Login = () => {\n    const history = useHistory();\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    function handleLoginProcess() {\n        if (username !== '') {\n            if (password !== '') {\n                var body = { username: username, password: password };\n                axios({ method: 'POST', url: process.env.REACT_APP_API_URL + 'api/auth/login', data: body })\n                    .then(function (response) {\n                        if (response.status == 200) {\n                            console.log(response.data);\n                            localStorage.setItem('is_login', true);\n                            localStorage.setItem('full_name', response.data.full_name);\n                            localStorage.setItem('token', response.data.token.token);\n                            localStorage.setItem('user_id', response.data.user_id);\n                            window.location.reload(false);\n                        }\n                    }).catch(function (error) {\n                        toast.error('Incorrect Password or Username')\n                        console.log(error);\n                    });\n            } else {\n                alert('Enter Password');\n            }\n        } else {\n            alert('Enter Username');\n        }\n    }\n    return (\n        <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n            <CContainer>\n                <CRow className=\"justify-content-center\">\n                    <CCol md={8}>\n                        <CCardGroup>\n                            <CCard className=\"p-4\">\n                                <CCardBody>\n                                    <CForm>\n                                        <h1>Login</h1>\n                                        <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                                        <CInputGroup className=\"mb-3\">\n                                            <CInputGroupText>\n                                                <CIcon icon={cilUser} />\n                                            </CInputGroupText>\n                                            <CFormInput\n                                                placeholder=\"Username\"\n                                                autoComplete=\"username\"\n                                                onChange={(e) => setUsername(e.target.value)} />\n                                        </CInputGroup>\n                                        <CInputGroup className=\"mb-4\">\n                                            <CInputGroupText>\n                                                <CIcon icon={cilLockLocked} />\n                                            </CInputGroupText>\n                                            <CFormInput\n                                                type=\"password\"\n                                                placeholder=\"Password\"\n                                                autoComplete=\"current-password\"\n                                                onChange={(e) => setPassword(e.target.value)}\n                                            />\n                                        </CInputGroup>\n                                        <CRow>\n                                            <CCol xs={6}>\n                                                <CButton color=\"primary\" className=\"px-4\" onClick={handleLoginProcess}>\n                                                    Login\n                                                </CButton>\n                                            </CCol>\n                                        </CRow>\n                                    </CForm>\n                                </CCardBody>\n                            </CCard>\n                        </CCardGroup>\n                    </CCol>\n                </CRow>\n            </CContainer>\n        </div>\n    )\n}\n\nexport default Login\n","import React, { useContext } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport '../src/Assets/style.scss';\n//import firebase from \"firebase/app\";\nimport { firebaseConfig } from \"./config/firebase\";\nimport Auth from './pages/Auth';\nimport Dashboard from './pages/Dashboard';\nimport toast, { Toaster } from 'react-hot-toast';\n\nimport { CircularProgress, Box } from '@material-ui/core';\nimport Login from \"./pages/Login\";\nconst authContext = React.createContext(null);\n\n\nexport default function App() {\n  React.useEffect(() => {\n    //firebase.initializeApp(firebaseConfig);\n    // let authObserver = firebase.auth().onAuthStateChanged((user) => {\n    //   if (user) {\n    //     firebase.auth().currentUser.getIdTokenResult().then((idToken) => {\n    //       if (idToken?.claims?.roles)\n    //         if (idToken.claims.roles[0] === \"ADMIN\") {\n    //           console.log(\"success\")\n    //           localStorage.setItem('wasLoggedIn', 1);\n    //           updateUser(user);\n    //         }\n    //         else {\n    //           console.log(\"errrrrr\")\n    //           toast.error(\"Not an admin\")\n    //           firebase.auth().signOut();\n    //         }\n\n    //     })\n\n    //   }\n    //   else {\n    //     localStorage.removeItem('wasLoggedIn');\n    //     updateUser(null);\n    //   }\n    // });\n    // if (localStorage.getItem('wasLoggedIn'))\n    //   setTimeout(() => updateInitialized(true), 2000)\n    // else\n    //   updateInitialized(true);\n    // return authObserver;\n\n    //console.log('full_name:',localStorage.getItem('full_name'));\n    console.log('is_login:',localStorage.getItem('is_login'));\n    console.log('token:',localStorage.getItem('token'));\n    //console.log('user_id:',localStorage.getItem('user_id'));\n    let is_login = localStorage.getItem('is_login');\n    if (is_login) {\n      console.log('------Logged------');\n      let userdata = {\n        full_name: localStorage.getItem('full_name'),\n        token: localStorage.getItem('token'),\n        user_id: localStorage.getItem('user_id')\n      }\n      updateUser(userdata);\n    } else {\n      console.log('----not--Logged------');\n      updateUser(null);\n    }\n\n  }, []);\n  const [initialized, updateInitialized] = React.useState(false);\n  const [user, updateUser] = React.useState(null);\n  console.log('----user--------',user);\n  // if (initialized !== true) {\n  //   return (\n  //     <Box\n  //       display=\"flex\"\n  //       justifyContent=\"center\"\n  //       alignItems=\"center\"\n  //       minHeight=\"100vh\"\n  //     >\n  //       <CircularProgress />\n  //     </Box>\n  //   )\n\n  // }\n\n\n  return (\n    <>\n      <authContext.Provider value={{ user, updateUser }}>\n        <Router >\n          <Switch>\n            <Route path=\"/auth\"> {user ? <Redirect to=\"/\" /> : <Login />} </Route>\n            <PrivateRoute path=\"/\"> <Dashboard /> </PrivateRoute>\n          </Switch>\n        </Router>\n      </authContext.Provider>\n      <Toaster />\n    </>\n  )\n}\n\nfunction PrivateRoute({ children, ...rest }) {\n  let auth = useContext(authContext);\n  console.log(auth)\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        auth.user !== null ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/auth\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// import reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}